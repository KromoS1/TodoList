{"version":3,"sources":["serviceWorker.ts","redux/types/Types.ts","DAL/APIAuthMe.ts","DAL/APITodoLists.ts","redux/actions/Actions.ts","utils/errorUtils.ts","redux/reducers/TodoListReducers.ts","DAL/APITasks.ts","redux/reducers/TaskReducer.ts","components/common/ButtonFilter.tsx","components/common/DatesTask.tsx","components/FormComponents/EditableSpanFormik.tsx","components/task/PageUpdateTask.tsx","components/task/Task.tsx","components/FormComponents/AddItemFormFormik.tsx","components/todolist/TodoList.tsx","components/common/SnackBars.tsx","components/todolist/TodoListContainer.tsx","redux/reducers/IsAuthReducer.ts","components/FormComponents/LoginFormFormik.tsx","components/Login/Login.tsx","components/header/Header.tsx","redux/reducers/StatusAppReducer.ts","app/App.tsx","redux/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","axiosInstance","axios","create","baseURL","withCredentials","headers","APIAuthMe","get","then","response","data","email","password","rememberMe","captcha","post","delete","APITodoLists","res","title","id","put","actionsTodoList","getTodoLists","todoLists","type","addTodoList","todoList","removeTodoList","todoListId","changeTodoListTitle","todoListID","changeTodoListFilter","filter","addTasksTodoList","isDisable","disable","actionsTask","getTask","tasks","addTask","task","removeTask","idTask","changeTask","actionsStatusApp","setStatusApp","status","setMessageStatus","message","setAppInitialized","isInitialized","actionsIsAuth","setMeData","isAuth","logOut","handleServerAppError","dispatch","messages","length","handleServerNetworkError","error","initialState","actions","APITasks","items","property","resultCode","getTasks","idTodolist","a","ButtonFilter","React","memo","props","titleP","filterP","onClickHandlerP","Button","variant","onClick","color","DatesTask","date","nameDate","useState","dateValue","setDateValue","classes","useStyles","className","container","noValidate","TextField","label","defaultValue","onChange","e","currentTarget","value","saveDate","textFieldTitle","InputLabelProps","shrink","makeStyles","theme","createStyles","display","flexWrap","margin","marginLeft","spacing","marginRight","width","priorities","Form","priority","setPriority","schema","Yup","shape","max","trim","formik","useFormik","initialValues","validationSchema","onSubmit","values","resetForm","changeTitle","handleSubmit","select","event","target","helperText","disabled","autoFocus","map","option","MenuItem","style","position","errors","getFieldProps","EditableSpanForm","withFormik","mapPropsToValues","form","EditableSpanFormik","editMode","setEditMode","saveTitle","useCallback","Tooltip","placement","substr","maxWidth","textFieldPriority","PageUpdateTask","useDispatch","useEffect","description","textDesc","setTextDesc","setTask","dateComp","push","Box","root","zIndex","Paper","elevation","box","header","IconButton","showDetails","font","newPriority","Number","content","dates","addedDate","startDate","deadline","multiline","rows","fullWidth","size","button","startIcon","height","top","left","backgroundColor","borderRadius","fontSize","fontWeight","justifyContent","Task","setShowDetails","onClickRemoveTask","showDetailsTask","onChangeTask","model","changeTaskTitle","taskJSX","GreenCheckbox","checked","InProgress","New","Delete","TaskContainer","todolistId","getState","find","tl","Error","modelAPI","order","item","updateTask","undefined","taskForTodoList","t","el","withStyles","green","Checkbox","AddBox","AddItemFormContainer","TodoList","setValue","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","todolist","listTasks","BottomNavigation","showLabels","bntNav","newValue","marginTop","overflowY","overflow","minWidth","maxHeight","Alert","Snackbars","statusApp","useSelector","state","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","TodoListContainer","createTaskTC","changeTaskFilter","updateTitleTodoListTC","todoListsJSX","Grid","TodoPage","addTodolistTC","padding","to","login","touched","required","min","paper","FormControlLabel","control","FormLoginContainer","initialEmail","initialPassword","initialRememberMe","minHeight","flexDirection","alignItems","LoginPage","signIn","formData","result","stopSubmit","_error","alignContent","Header","AppBar","Toolbar","edge","aria-label","Menu","Typography","logout","HeaderContainer","userLogin","App","me","LinearProgress","load","Container","fixed","path","component","progress","CircularProgress","page","rootReducer","combineReducers","action","isLoad","key","copyState","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.c321dad9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","type PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type ActionsType<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesType<T>>\r\n\r\n// todolist type\r\n\r\nexport type TodoListDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    disable: boolean\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nexport type TodolistPropsType = {\r\n    todoList:TodoListDomainType\r\n    tasks: TaskType[]\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodoListTitle: (todoListID: string, title: string) => void\r\n};\r\n\r\nexport type TodoListContainerType = {\r\n    todoLists: TodoListDomainType[]\r\n    tasks: TaskStateType\r\n}\r\n\r\n\r\n///task type\r\nexport type TaskType = {\r\n    id: string\r\n    todoListId: string\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    order: number\r\n    startDate: string\r\n    addedDate: string\r\n    deadline: string\r\n};\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nexport type TaskTypeProps = {\r\n    task: TaskType\r\n    todoListId: string\r\n    disable:boolean\r\n    removeTask: (idTask: string, todoListID: string) => void\r\n    changeTask: (todolistId: string, idTask: string, task: UpdateModelPropertyTaskType) => void\r\n}\r\n\r\nexport type TaskContainerPropsType = {\r\n    tasks: TaskType[]\r\n    todoListId: string\r\n    filter: FilterValuesType\r\n    disable:boolean\r\n}\r\n\r\nexport type UpdateModelPropertyTaskType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    order?: number\r\n    startDate?: string\r\n    addedDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type APIModelPropertyTaskType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    order: number\r\n    startDate: string\r\n    addedDate: string\r\n    deadline: string\r\n}\r\n\r\n//addItemForm\r\nexport type AddItemFormType = {\r\n    addItem: (title: string) => void\r\n    disable:boolean\r\n}\r\n\r\n//editableSpan\r\nexport type EditableSpanType = {\r\n    titleSpan: string\r\n    changeTitle: (newTitle: string) => void\r\n    type: 'title' | 'priority'\r\n    disable?:boolean\r\n};\r\n\r\n//isAuth types\r\nexport type AuthMeType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}\r\n\r\nexport type MeProfileType = AuthMeType & {\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: boolean\r\n    isAuth:boolean\r\n}\r\n\r\nexport type FormDataLoginType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n    captcha?: boolean\r\n}","import axios from 'axios'\r\nimport {ResponseTypeGeneric} from \"../redux/types/TypesResponse\";\r\nimport {AuthMeType} from \"../redux/types/Types\";\r\n\r\n\r\nexport const axiosInstance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '23cf7b54-6cd9-4cb1-a851-3767976432ef'\r\n    },\r\n})\r\n\r\nexport const APIAuthMe = {\r\n    me(){\r\n        return axiosInstance.get<ResponseTypeGeneric<AuthMeType>>(\"auth/me\")\r\n            .then(response => response.data);\r\n    },\r\n    login(email:string,password:string,rememberMe?:boolean,captcha?:boolean){\r\n        return axiosInstance.post<ResponseTypeGeneric<{userId:number}>>(\"auth/login\",{email,password,rememberMe,captcha})\r\n            .then(response => response.data)\r\n    },\r\n    logOut(){\r\n        return axiosInstance.delete<ResponseTypeGeneric>(\"auth/login\")\r\n            .then(response => response.data)\r\n    }\r\n}\r\n","import {TodoListDomainType} from '../redux/types/Types';\r\nimport {ResponseTypeGeneric} from '../redux/types/TypesResponse';\r\nimport { axiosInstance } from './APIAuthMe';\r\n\r\nexport const APITodoLists = {\r\n    get() {\r\n        return axiosInstance.get<TodoListDomainType[]>(\"todo-lists\")\r\n            .then(res => res.data)\r\n    },\r\n    create(title:string) {\r\n        return axiosInstance.post<ResponseTypeGeneric<{item:TodoListDomainType}>>(\"todo-lists\", {title})\r\n            .then(response => response.data)\r\n    },\r\n    updateTitle(title: string, id: string) {\r\n        return axiosInstance.put<ResponseTypeGeneric>(`todo-lists/${id}`, {title})\r\n            .then(response => response.data)\r\n    },\r\n    delete(id: string) {\r\n        return axiosInstance.delete<ResponseTypeGeneric>(`todo-lists/${id}`)\r\n            .then(response => response.data)\r\n    },\r\n}\r\n\r\n","import {AuthMeType, FilterValuesType, TaskType, TodoListDomainType} from '../types/Types';\r\nimport {StatusType} from \"../reducers/StatusAppReducer\";\r\n\r\nexport const actionsTodoList = {\r\n    getTodoLists: (todoLists: TodoListDomainType[]) => ({type: 'GET-TODO-LISTS', todoLists} as const),\r\n    addTodoList: (todoList: TodoListDomainType) => ({type: 'ADD-TODOLIST', todoList} as const),\r\n    removeTodoList: (todoListId: string) => ({type: 'REMOVE-TODOLIST', todoListId} as const),\r\n    changeTodoListTitle: (todoListID: string, title: string) => ({\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        todoListID,\r\n        title\r\n    } as const),\r\n    changeTodoListFilter: (todoListID: string, filter: FilterValuesType) => ({\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        todoListID,\r\n        filter\r\n    } as const),\r\n    addTasksTodoList: (todoListId: string) => ({type: 'ADD-TASKS-FOR-TODOLIST', todoListId} as const),\r\n    isDisable:(disable:boolean, todoListId:string) => ({type:\"IS-DISABLE\",disable,todoListId} as const),\r\n}\r\n\r\nexport const actionsTask= {\r\n    getTask: (todoListId: string, tasks: TaskType[]) => ({type: 'GET-TASK', todoListId, tasks} as const),\r\n    addTask: (task: TaskType) => ({type: 'ADD-TASK', task,} as const),\r\n    removeTask: (idTask: string, todoListId: string) => ({type: 'REMOVE-TASK', todoListId, idTask} as const),\r\n    changeTask: (todoListId: string, idTask: string, task: TaskType) => ({\r\n        type: 'CHANGE-TASK',\r\n        todoListId,\r\n        idTask,\r\n        task\r\n    } as const),\r\n}\r\n\r\nexport const actionsStatusApp = {\r\n    setStatusApp: (status:StatusType) => ({type:\"SET-APP-STATUS\",status} as const),\r\n    setMessageStatus:(message?:string) => ({type:\"SET-MESSAGE-STATUS\",message} as const),\r\n    setAppInitialized:(isInitialized:boolean) => ({type:\"SET-APP-INITIALIZED\",isInitialized} as const),\r\n}\r\n\r\nexport const actionsIsAuth = {\r\n    setMeData: (data:AuthMeType,isAuth:boolean) => ({type: \"SET-ME-DATA\",data,isAuth} as const),\r\n    logOut:() => ({type:\"LOG-OUT\"} as const),\r\n};","import {ResponseTypeGeneric} from \"../redux/types/TypesResponse\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ActionsType} from \"../redux/types/Types\";\r\nimport {actionsStatusApp} from \"../redux/actions/Actions\";\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<ActionsType<typeof actionsStatusApp>>\r\n\r\nexport const handleServerAppError = <T>(data: ResponseTypeGeneric<T>, dispatch: ErrorUtilsDispatchType) => {\r\n\r\n    if (data.messages.length) {\r\n        dispatch(actionsStatusApp.setMessageStatus(data.messages[0]));\r\n    } else {\r\n        dispatch(actionsStatusApp.setMessageStatus(\"Some error occurred.\"));\r\n    }\r\n    dispatch(actionsStatusApp.setStatusApp(\"failed\"));\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(actionsStatusApp.setMessageStatus(error.message))\r\n    dispatch(actionsStatusApp.setStatusApp('failed'))\r\n}","import {APITodoLists} from '../../DAL/APITodoLists';\r\nimport {ActionsType, TodoListDomainType} from '../types/Types';\r\nimport {AppThunkType} from '../store';\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/errorUtils\";\r\nimport {actionsStatusApp, actionsTodoList} from \"../actions/Actions\";\r\n\r\nconst initialState: TodoListDomainType[] = [];\r\nconst actions = {\r\n    ...actionsTodoList,\r\n    ...actionsStatusApp,\r\n}\r\n\r\nexport const TodoListReducers = (state: TodoListDomainType[] = initialState, action: ActionsType<typeof actions>): TodoListDomainType[] => {\r\n    switch (action.type) {\r\n        case 'GET-TODO-LISTS':\r\n            return action.todoLists.map(tl => ({...tl, filter: \"all\", isLoad: false}));\r\n        case 'ADD-TODOLIST':\r\n            return [...state, {...action.todoList, filter: \"all\"}];\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.todoListID ? {...tl, title: action.title} : tl);\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.todoListID ? {...tl, filter: action.filter} : tl);\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.todoListId);\r\n        }\r\n        case \"IS-DISABLE\":\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, disable: action.disable} : tl);\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getTodoListsTC = (): AppThunkType => async dispatch => {\r\n    dispatch(actions.setStatusApp(\"load\"));\r\n    try {\r\n        const todoLists = await APITodoLists.get();\r\n        dispatch(actions.getTodoLists(todoLists));\r\n        dispatch(actions.setStatusApp(\"idle\"));\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch);\r\n    }\r\n}\r\n\r\nexport const addTodolistTC = (title: string): AppThunkType => async dispatch => {\r\n    dispatch(actions.setStatusApp(\"load\"));\r\n    try {\r\n        const todoList = await APITodoLists.create(title);\r\n        if (todoList.resultCode === 0) {\r\n            dispatch(actions.addTodoList(todoList.data.item))\r\n            dispatch(actions.addTasksTodoList(todoList.data.item.id))\r\n            dispatch(actions.setStatusApp(\"succeeded\"));\r\n            dispatch(actions.setMessageStatus(\"Todo list created succeeded.\"));\r\n        } else {\r\n            handleServerAppError<{ item: TodoListDomainType }>(todoList, dispatch);\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch);\r\n    }\r\n}\r\n\r\nexport const deleteTodoListTC = (id: string): AppThunkType => async dispatch => {\r\n    dispatch(actions.setStatusApp(\"load\"));\r\n    dispatch(actions.isDisable(true, id));\r\n    try {\r\n        const data = await APITodoLists.delete(id)\r\n        if (data.resultCode === 0) {\r\n            dispatch(actions.removeTodoList(id));\r\n            dispatch(actions.removeTodoList(id));\r\n            dispatch(actions.setStatusApp(\"succeeded\"));\r\n            dispatch(actions.setMessageStatus(\"Todo list remove succeeded.\"));\r\n            dispatch(actions.isDisable(false, id));\r\n        }else{\r\n            handleServerAppError(data, dispatch);\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch);\r\n        dispatch(actions.isDisable(false, id));\r\n    }\r\n}\r\n\r\nexport const updateTitleTodoListTC = (id: string, title: string): AppThunkType => async dispatch => {\r\n    dispatch(actions.setStatusApp(\"load\"));\r\n    dispatch(actions.isDisable(true, id));\r\n    try {\r\n        const data = await APITodoLists.updateTitle(title, id)\r\n        if (data.resultCode === 0) {\r\n            dispatch(actions.changeTodoListTitle(id, title));\r\n            dispatch(actions.setStatusApp(\"succeeded\"));\r\n            dispatch(actions.setMessageStatus(\"Todo list change succeeded.\"));\r\n            dispatch(actions.isDisable(false, id));\r\n        }else{\r\n            handleServerAppError(data, dispatch);\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch);\r\n        dispatch(actions.isDisable(false, id));\r\n    }\r\n}","import {APIModelPropertyTaskType, TaskType} from '../redux/types/Types';\r\nimport {ResponseTypeGeneric, ResponseTypeGet} from '../redux/types/TypesResponse';\r\nimport {axiosInstance} from \"./APIAuthMe\";\r\n\r\nexport const APITasks = {\r\n    get(id: string) {\r\n        return axiosInstance.get<ResponseTypeGet<TaskType[]>>(`/todo-lists/${id}/tasks`)\r\n            .then(response => response.data.items)\r\n    },\r\n    create(id: string, title: string) {\r\n        return axiosInstance.post<ResponseTypeGeneric<{ item: TaskType }>>(`/todo-lists/${id}/tasks`, {title})\r\n            .then(response => response.data)\r\n    },\r\n    updateTitle(todoListId: string, idTask: string, property: APIModelPropertyTaskType) {\r\n        return axiosInstance.put<ResponseTypeGeneric<{ item: TaskType }>>(`/todo-lists/${todoListId}/tasks/${idTask}`, {...property})\r\n            .then(response => response.data)\r\n    },\r\n    delete(todoListId: string, idTask: string) {\r\n        return axiosInstance.delete<ResponseTypeGeneric>(`/todo-lists/${todoListId}/tasks/${idTask}`)\r\n            .then(response => response.data.resultCode)\r\n    }\r\n}\r\n","import {APITasks} from '../../DAL/APITasks';\r\nimport {\r\n    ActionsType,\r\n    APIModelPropertyTaskType,\r\n    TaskStateType,\r\n    TaskType,\r\n    UpdateModelPropertyTaskType\r\n} from '../types/Types';\r\nimport {AppRootStateType, AppThunkType} from '../store';\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/errorUtils\";\r\nimport {actionsStatusApp, actionsTask, actionsTodoList} from \"../actions/Actions\";\r\n\r\nconst initialState: TaskStateType = {}\r\nconst actions = {\r\n    ...actionsTask,\r\n    ...actionsStatusApp,\r\n    ...actionsTodoList,\r\n}\r\n\r\nexport const TaskReducer = (state: TaskStateType = initialState, action: ActionsType<typeof actions>): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'GET-TASK':\r\n            return {...state, [action.todoListId]: [...action.tasks]}\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todoListId]: state[action.todoListId].filter(el => el.id !== action.idTask)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'ADD-TASKS-FOR-TODOLIST':\r\n            return {...state, [action.todoListId]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const key = action.todoListId;\r\n            const copyState = {...state};\r\n            delete copyState[key];\r\n            return copyState;\r\n        case 'CHANGE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.idTask ? action.task : t)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getTasks = (idTodolist: string): AppThunkType => async dispatch => {\r\n    dispatch(actions.setStatusApp(\"load\"));\r\n    try {\r\n        const tasks = await APITasks.get(idTodolist);\r\n        dispatch(actions.getTask(idTodolist, tasks));\r\n        dispatch(actions.setStatusApp(\"idle\"));\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch);\r\n    }\r\n}\r\n\r\nexport const createTaskTC = (idTodolist: string, title: string): AppThunkType => async dispatch => {\r\n    dispatch(actions.setStatusApp(\"load\"));\r\n    dispatch(actions.isDisable(true,idTodolist));\r\n    try {\r\n        const data = await APITasks.create(idTodolist, title);\r\n        if (data.resultCode === 0) {\r\n            dispatch(actions.addTask(data.data.item));\r\n            dispatch(actions.setStatusApp(\"succeeded\"));\r\n            dispatch(actions.setMessageStatus(\"Task created succeeded.\"));\r\n            dispatch(actions.isDisable(false,idTodolist));\r\n        }else{\r\n            handleServerAppError<{item:TaskType}>(data, dispatch);\r\n            dispatch(actions.isDisable(false,idTodolist));\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch);\r\n        dispatch(actions.isDisable(false,idTodolist));\r\n    }\r\n}\r\n\r\nexport const updateTask = (todoListId: string, idTask: string, model: UpdateModelPropertyTaskType): AppThunkType =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(actions.setStatusApp(\"load\"));\r\n        dispatch(actions.isDisable(true,todoListId));\r\n        const task = getState().tasks[todoListId].find(tl => tl.id === idTask);\r\n        if (!task) {\r\n            throw new Error(\"task not found in the state\");\r\n        }\r\n        const modelAPI: APIModelPropertyTaskType = {\r\n            title: task.title,\r\n            order: task.order,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            status: task.status,\r\n            addedDate: task.addedDate,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...model\r\n        }\r\n        try {\r\n            const data = await APITasks.updateTitle(todoListId, idTask, modelAPI)\r\n            if (data.resultCode === 0) {\r\n                dispatch(actions.changeTask(todoListId, idTask, data.data.item));\r\n                dispatch(actions.setStatusApp(\"succeeded\"));\r\n                dispatch(actions.setMessageStatus(\"Task change succeeded.\"));\r\n                dispatch(actions.isDisable(false,todoListId));\r\n            }else{\r\n                handleServerAppError<{item:TaskType}>(data, dispatch);\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch);\r\n            dispatch(actions.isDisable(false,todoListId));\r\n        }\r\n\r\n    }\r\n\r\nexport const deleteTask = (todoListId: string, idTask: string): AppThunkType => async dispatch => {\r\n    dispatch(actions.setStatusApp(\"load\"));\r\n    dispatch(actions.isDisable(true,todoListId))\r\n    try {\r\n        const resultCode = await APITasks.delete(todoListId, idTask)\r\n        if (resultCode === 0) {\r\n            dispatch(actions.removeTask(idTask, todoListId));\r\n            dispatch(actions.setStatusApp(\"succeeded\"));\r\n            dispatch(actions.setMessageStatus(\"Task remove succeeded.\"));\r\n            dispatch(actions.isDisable(false,todoListId))\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch);\r\n        dispatch(actions.isDisable(false,todoListId));\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {FilterValuesType} from '../../redux/types/Types';\r\n\r\ntype ButtonFilterType = {\r\n    titleP:string\r\n    filterP: FilterValuesType\r\n    onClickHandlerP: () => void\r\n}\r\n\r\nexport const ButtonFilter = React.memo( (props:ButtonFilterType) => {\r\n    const {titleP,filterP,onClickHandlerP} = props;\r\n    return(\r\n        <div>\r\n            <Button variant={filterP === titleP ? \"contained\" : \"outlined\"}\r\n                    onClick={onClickHandlerP}\r\n                    color={\"primary\"}>{titleP}</Button>\r\n        </div>\r\n    )\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\ntype PropsType = {\r\n    nameDate:string\r\n    date: string\r\n    saveDate:(date:string) => void\r\n}\r\n\r\nexport const DatesTask = (props:PropsType) => {\r\n    const {date,nameDate} = props\r\n    const [dateValue,setDateValue] = useState<string>(date);\r\n\r\n    const changeDate = (e:ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        setDateValue(e.currentTarget.value);\r\n        props.saveDate(dateValue);\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <form className={classes.container} noValidate>\r\n            <TextField\r\n                id=\"datetime-local\"\r\n                label={nameDate}\r\n                type=\"datetime-local\"\r\n                defaultValue={dateValue}\r\n                onChange={changeDate}\r\n                className={classes.textFieldTitle}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        container: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n            margin:'10px 0 0 0'\r\n        },\r\n        textFieldTitle: {\r\n            marginLeft: theme.spacing(1),\r\n            marginRight: theme.spacing(1),\r\n            width: 210,\r\n        },\r\n    }),\r\n);","import React, {useCallback, useState} from 'react';\r\nimport {makeStyles, MenuItem, TextField, Tooltip} from \"@material-ui/core\";\r\nimport {FormikProps, useFormik, withFormik} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {createStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\ninterface ValuesType {\r\n    title: string\r\n    onSubmit: (newTitle: string) => void\r\n    type: 'title' | 'priority'\r\n    disable?: boolean\r\n}\r\ninterface FormProps {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n    type: 'title' | 'priority'\r\n    disable?: boolean\r\n}\r\n\r\nconst priorities = [\r\n    {\r\n        value: '1',\r\n        label: '1',\r\n    },\r\n    {\r\n        value: '2',\r\n        label: '2',\r\n    },\r\n    {\r\n        value: '3',\r\n        label: '3',\r\n    },\r\n    {\r\n        value: '4',\r\n        label: '4',\r\n    },\r\n];\r\n\r\nconst Form: React.FC<FormProps & FormikProps<ValuesType>> = React.memo(props => {\r\n\r\n    const [priority, setPriority] = useState('4');\r\n\r\n    const classes = useStyles();\r\n    const schema = Yup.object().shape({\r\n        title: Yup.string().max(100, \"Too long\").trim()\r\n    })\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setPriority(event.target.value);\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            title: props.title,\r\n            type: props.type,\r\n            disable: props.disable\r\n        },\r\n        validationSchema: schema,\r\n        onSubmit: (values, {resetForm}) => {\r\n            props.changeTitle(values.title);\r\n            resetForm({})\r\n        }\r\n    })\r\n\r\n    if (props.type === \"priority\") {\r\n        return (\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <TextField\r\n                    id=\"standard-select-currency\"\r\n                    select\r\n                    label=\"Select\"\r\n                    value={priority}\r\n                    onChange={handleChange}\r\n                    helperText=\"Please select your priority\"\r\n                    disabled={formik.values.disable} autoFocus\r\n                >\r\n                    {priorities.map((option) => (\r\n                        <MenuItem key={option.value} value={option.value}>\r\n                            {option.label}\r\n                        </MenuItem>\r\n                    ))}\r\n                </TextField>\r\n\r\n                <div style={({position: \"fixed\"})}>{formik.errors.title ? <div>{formik.errors.title}</div> : null}</div>\r\n            </form>\r\n        )\r\n    } else {\r\n        return (\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <TextField {...formik.getFieldProps(\"title\")}\r\n                           className={classes.textFieldTitle}\r\n                           disabled={formik.values.disable} autoFocus/>\r\n                <div style={({position: \"fixed\"})}>{formik.errors.title ? <div>{formik.errors.title}</div> : null}</div>\r\n            </form>\r\n        )\r\n    }\r\n})\r\n\r\n\r\nconst EditableSpanForm = withFormik<FormProps, ValuesType>({\r\n    mapPropsToValues: props => {\r\n        return {\r\n            title: props.title,\r\n            disable: props.disable,\r\n            onSubmit: props.changeTitle,\r\n            type: props.type,\r\n        };\r\n    },\r\n    handleSubmit: (values, form) => {\r\n        form.props.changeTitle(values.title);\r\n    },\r\n})(Form);\r\n\r\n\r\nexport const EditableSpanFormik: React.FC<FormProps> = props => {\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n    const saveTitle = useCallback((title: string) => {\r\n        props.changeTitle(title);\r\n        setEditMode(false);\r\n    }, [props])\r\n\r\n\r\n    const titleForSpan = (): string => {\r\n        if (props.title.length > 23) {\r\n            return props.title.substr(0, 23) + \"...\";\r\n        } else {\r\n            return props.title;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                editMode\r\n                    ? <EditableSpanForm type={'title'} title={props.title}\r\n                                        changeTitle={saveTitle}\r\n                                        disable={props.disable}/>\r\n                    : <Tooltip title={props.title} placement={\"top\"}>\r\n                    <span onClick={() => {\r\n                        setEditMode(true)\r\n                    }}>{titleForSpan()}</span>\r\n                    </Tooltip>\r\n            }</>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        textFieldTitle: {\r\n            maxWidth: '130px',\r\n        },\r\n        textFieldPriority: {\r\n            '& .MuiTextField-root': {\r\n                margin: theme.spacing(1),\r\n                width: '25ch',\r\n            }\r\n        },\r\n    })\r\n)","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {Box, Button, IconButton, makeStyles, Paper, TextField} from '@material-ui/core';\r\nimport {getTasks} from '../../redux/reducers/TaskReducer';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport {DatesTask} from '../common/DatesTask';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport {useDispatch} from 'react-redux';\r\nimport {TaskPriorities, TaskType, UpdateModelPropertyTaskType} from '../../redux/types/Types';\r\nimport {EditableSpanFormik} from \"../FormComponents/EditableSpanFormik\";\r\nimport {withFormik} from \"formik\";\r\n\r\ninterface PageUpdateTaskType {\r\n    task: TaskType\r\n    changeTask: (property: UpdateModelPropertyTaskType) => void\r\n    showDetails: () => void\r\n}\r\n\r\nexport const PageUpdateTask: React.FC<PageUpdateTaskType> = React.memo(props => {\r\n\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(getTasks(props.task.todoListId));\r\n    }, [])\r\n\r\n    const [textDesc, setTextDesc] = useState<string>(props.task.description);\r\n    const [task, setTask] = useState<TaskType>({...props.task});\r\n    const date: string[] = [];\r\n    const classes = useStyles();\r\n\r\n    const onChangeText = (e: ChangeEvent<HTMLInputElement>) => setTextDesc(e.currentTarget.value);\r\n\r\n    const saveDate = (dateComp: string) => {\r\n        date.push(dateComp)\r\n    }\r\n\r\n    const savePriority = (newPriority: string) => {\r\n        const priority: TaskPriorities = Number(newPriority);\r\n        setTask({...task, priority});\r\n    }\r\n\r\n    const saveTask = () => {\r\n        const property: UpdateModelPropertyTaskType = {\r\n            priority: task.priority,\r\n            description: textDesc,\r\n            addedDate: date[0],\r\n            startDate: date[1],\r\n            deadline: date[2],\r\n        }\r\n        props.changeTask(property);\r\n        props.showDetails();\r\n    }\r\n\r\n    return (\r\n        <Box className={classes.root} zIndex={'tooltip'}>\r\n            <Paper elevation={20} className={classes.box}>\r\n                <form>\r\n                    <div className={classes.header}>\r\n                        <div>\r\n                            <IconButton onClick={() => props.showDetails()}>\r\n                                <ChevronLeftIcon/>\r\n                            </IconButton>\r\n                        </div>\r\n                        <div className={classes.font}>\r\n                            <span>{task.title}</span>\r\n                        </div>\r\n                        <div className={classes.font}>\r\n                            <EditableSpanFormik title={task.priority + ''} changeTitle={savePriority} type={'priority'}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.content}>\r\n                        <div className={classes.dates}>\r\n                            <DatesTask date={task.addedDate} nameDate={'Added Start'} saveDate={saveDate}/>\r\n                            <DatesTask date={task.startDate} nameDate={'Start Date'} saveDate={saveDate}/>\r\n                            <DatesTask date={task.deadline} nameDate={'Dead line'} saveDate={saveDate}/>\r\n                        </div>\r\n                        <div className={classes.description}>\r\n                            <TextField variant={'outlined'}\r\n                                       value={textDesc}\r\n                                       label={'Description'}\r\n                                       onChange={onChangeText}\r\n                                       multiline\r\n                                       rows={8}\r\n                                       fullWidth\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            className={classes.button}\r\n                            onClick={saveTask}\r\n                            startIcon={<SaveIcon/>}\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                    </div>\r\n                </form>\r\n            </Paper>\r\n        </Box>\r\n    )\r\n})\r\n\r\n//\r\n// const EditableSpanForm = withFormik<FormProps, ValuesType>({\r\n//     mapPropsToValues: props => {\r\n//         return {\r\n//             title: props.title,\r\n//             disable: props.disable,\r\n//             onSubmit: props.changeTitle,\r\n//             type: props.type,\r\n//         };\r\n//     },\r\n//     handleSubmit: (values, form) => {\r\n//         form.props.changeTitle(values.title);\r\n//     },\r\n// })(Form);\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '47vw',\r\n            height: '42vh',\r\n        },\r\n        top: '200px',\r\n        left: '400px',\r\n        position: 'absolute',\r\n        backgroundColor: '#3f51b5',\r\n        borderRadius: '15px',\r\n    },\r\n    box: {\r\n        backgroundColor: '#ffffff'\r\n    },\r\n    font: {\r\n        fontSize: '24px',\r\n        fontWeight: 'bold',\r\n        marginRight: '35px'\r\n    },\r\n    header: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        margin: '10px 20px 10px 10px'\r\n    },\r\n    content: {\r\n        display: 'flex',\r\n        justifyContent: 'space-around'\r\n    },\r\n    dates: {},\r\n    description: {\r\n        width: '350px'\r\n    },\r\n    button: {\r\n        margin: theme.spacing(2.5),\r\n    },\r\n}));\r\n\r\n\r\n","import React, {ChangeEvent, useCallback, useState} from 'react';\r\nimport {Checkbox, CheckboxProps, IconButton, withStyles} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {green} from '@material-ui/core/colors';\r\nimport {PageUpdateTask} from './PageUpdateTask';\r\nimport {\r\n    TaskContainerPropsType,\r\n    TaskStatuses,\r\n    TaskTypeProps,\r\n    UpdateModelPropertyTaskType\r\n} from '../../redux/types/Types';\r\nimport {deleteTask, updateTask} from '../../redux/reducers/TaskReducer';\r\nimport {useDispatch} from 'react-redux';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport {EditableSpanFormik} from \"../FormComponents/EditableSpanFormik\";\r\n\r\nexport const Task: React.FC<TaskTypeProps> = React.memo(props => {\r\n    const [showDetails, setShowDetails] = useState<boolean>(false);\r\n\r\n    const onClickRemoveTask = useCallback(() => {\r\n        props.removeTask(props.task.id, props.todoListId)\r\n    }, [props]);\r\n    const showDetailsTask = useCallback(() => {\r\n        setShowDetails(!showDetails);\r\n    }, [showDetails]);\r\n\r\n    const onChangeTask = useCallback((model: UpdateModelPropertyTaskType) => {\r\n        props.changeTask(props.todoListId, props.task.id, model);\r\n    }, [props]);\r\n    const changeTaskTitle = useCallback((title: string) => {\r\n        onChangeTask({title});\r\n    }, [onChangeTask]);\r\n    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        e.currentTarget.checked\r\n            ? onChangeTask({status: TaskStatuses.InProgress})\r\n            : onChangeTask({status: TaskStatuses.New})\r\n    }\r\n\r\n    const taskJSX = (\r\n        <>\r\n            <div className={'task'} key={props.task.id}>\r\n                <GreenCheckbox checked={props.task.status === TaskStatuses.InProgress}\r\n                               onChange={changeTaskStatus} disabled={props.disable}/>\r\n                <EditableSpanFormik type={'title'}\r\n                                    title={props.task.title}\r\n                                    changeTitle={changeTaskTitle}\r\n                                    disable={props.disable}/>\r\n                <IconButton onClick={showDetailsTask} disabled={props.disable}>\r\n                    <ExpandMoreIcon/>\r\n                </IconButton>\r\n                <IconButton onClick={onClickRemoveTask} disabled={props.disable}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n    return (\r\n        showDetails\r\n            ? <>\r\n                <PageUpdateTask task={props.task} changeTask={onChangeTask} showDetails={showDetailsTask}/>\r\n                {taskJSX}\r\n            </>\r\n            : <>\r\n                {taskJSX}\r\n            </>\r\n    )\r\n})\r\n\r\nexport const TaskContainer: React.FC<TaskContainerPropsType> = props => {\r\n    let taskJSX;\r\n    const dispatch = useDispatch();\r\n\r\n    const changeTask = useCallback((todolistId: string, idTask: string, model: UpdateModelPropertyTaskType) => {\r\n        dispatch(updateTask(todolistId, idTask, model));\r\n    }, [dispatch]);\r\n    const removeTask = useCallback((id: string, todoListID: string) => {\r\n        dispatch(deleteTask(todoListID, id));\r\n    }, [dispatch]);\r\n\r\n    if (props.tasks !== undefined) {\r\n        let taskForTodoList = props.tasks;\r\n        if (props.filter === 'active') {\r\n            taskForTodoList = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n        }\r\n        if (props.filter === 'completed') {\r\n            taskForTodoList = props.tasks.filter(t => t.status === TaskStatuses.InProgress)\r\n        }\r\n        taskJSX = taskForTodoList.map(el =>\r\n            <Task key={el.id}\r\n                  task={el}\r\n                  disable={props.disable}\r\n                  todoListId={props.todoListId}\r\n                  removeTask={removeTask}\r\n                  changeTask={changeTask}\r\n            />);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {taskJSX}\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nconst GreenCheckbox = withStyles({\r\n    root: {\r\n        color: green[400],\r\n        '&$checked': {\r\n            color: green[600],\r\n        },\r\n    },\r\n    checked: {},\r\n})((props: CheckboxProps) => <Checkbox color=\"default\" {...props} />);","import React from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {FormikProps, useFormik, withFormik} from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\ninterface ValuesType {\r\n    title: string\r\n}\r\n\r\ninterface FormProps {\r\n    disable: boolean\r\n    onSubmit: (title: string) => void\r\n}\r\n\r\nconst Form: React.FC<FormProps & FormikProps<ValuesType>> = React.memo(props => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            title: \"\"\r\n        },\r\n        validationSchema: Yup.object().shape({\r\n            title: Yup.string().trim(\"spaces are not allowed at the beginning of the task name.\").max(100, \"Too long\")\r\n        }),\r\n        onSubmit: (values, {resetForm}) => {\r\n            props.onSubmit(values.title);\r\n            resetForm({})\r\n        }\r\n    })\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit} style={({position:\"absolute\"})}>\r\n            <TextField {...formik.getFieldProps(\"title\")}\r\n                       variant={\"outlined\"} disabled={props.disable}\r\n                       size={'small'}\r\n                       label={formik.errors.title ? \"Error\" : \"Title\"}\r\n                        error={formik.errors.title !== undefined}\r\n                       helperText={formik.errors.title ? formik.errors.title : null}\r\n            />\r\n            <IconButton color={\"primary\"} disabled={props.disable} type={\"submit\"}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </form>\r\n    )\r\n})\r\n\r\n\r\nexport const AddItemFormContainer = withFormik<FormProps, ValuesType>({\r\n    mapPropsToValues: props => {\r\n        return {\r\n            title: \"\",\r\n            disable: props.disable,\r\n            onSubmit: props.onSubmit\r\n        };\r\n    },\r\n    handleSubmit: (values, form) => {\r\n        form.props.onSubmit(values.title);\r\n    },\r\n})(Form);\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {BottomNavigation, IconButton, makeStyles} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {ButtonFilter} from '../common/ButtonFilter';\r\nimport {TaskContainer} from '../task/Task';\r\nimport {getTasks} from '../../redux/reducers/TaskReducer';\r\nimport {useDispatch} from 'react-redux';\r\nimport {TodolistPropsType} from '../../redux/types/Types';\r\nimport {AddItemFormContainer} from \"../FormComponents/AddItemFormFormik\";\r\nimport {EditableSpanFormik} from \"../FormComponents/EditableSpanFormik\";\r\n\r\nexport const TodoList: React.FC<TodolistPropsType> = React.memo(props => {\r\n\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const [value, setValue] = useState<number>(0);\r\n\r\n    useEffect(() => {\r\n        dispatch(getTasks(props.todoList.id));\r\n    }, [dispatch,props.todoList.id])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todoList.id);\r\n    }, [props]);\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todoList.id), [props]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todoList.id), [props]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todoList.id), [props]);\r\n\r\n    const onClickRemoveTodoList = () => props.removeTodoList(props.todoList.id);\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        props.changeTodoListTitle(props.todoList.id, title);\r\n    }, [props]);\r\n\r\n    return (\r\n        <div className={classes.todolist}>\r\n            <h3 className={'task_title'}>\r\n                <EditableSpanFormik title={props.todoList.title}\r\n                                    changeTitle={changeTodoListTitle}\r\n                                    type={\"title\"}\r\n                                    disable={props.todoList.disable}/>\r\n                <IconButton onClick={onClickRemoveTodoList} disabled={props.todoList.disable}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemFormContainer onSubmit={addTask} disable={props.todoList.disable}/>\r\n            <div className={classes.listTasks}>\r\n                <TaskContainer todoListId={props.todoList.id}\r\n                               tasks={props.tasks}\r\n                               filter={props.todoList.filter}\r\n                               disable={props.todoList.disable}/>\r\n            </div>\r\n            <BottomNavigation value={value}\r\n                              showLabels\r\n                              className={classes.bntNav}\r\n                              onChange={(event, newValue) => {setValue(newValue);}}>\r\n                <ButtonFilter titleP={'all'} filterP={props.todoList.filter} onClickHandlerP={onAllClickHandler}/>\r\n                <ButtonFilter titleP={'active'} filterP={props.todoList.filter} onClickHandlerP={onActiveClickHandler}/>\r\n                <ButtonFilter titleP={'completed'} filterP={props.todoList.filter} onClickHandlerP={onCompletedClickHandler}/>}\r\n            </BottomNavigation>\r\n        </div>\r\n    );\r\n})\r\n\r\nconst useStyles = makeStyles({\r\n    bntNav: {\r\n    },\r\n    listTasks:{\r\n        marginTop:\"70px\",\r\n        overflowY:\"scroll\",\r\n        height:\"300px\",\r\n    },\r\n    todolist:{\r\n        overflow:\"hidden\",\r\n        minWidth: 360,\r\n        maxHeight:490,\r\n    }\r\n});\r\n\r\n","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport {StatusAppType} from \"../../redux/reducers/StatusAppReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\nimport MuiAlert, {AlertProps} from \"@material-ui/lab/Alert\";\r\nimport {actionsStatusApp} from \"../../redux/actions/Actions\";\r\n\r\nconst Alert = (props: AlertProps) => <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n\r\nexport const Snackbars = () => {\r\n\r\n    const statusApp = useSelector<AppRootStateType, StatusAppType>(state => state.statusApp);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(actionsStatusApp.setStatusApp(\"idle\"));\r\n        dispatch(actionsStatusApp.setMessageStatus(\"\"));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Snackbar open={statusApp.status === \"succeeded\"} autoHideDuration={3000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"success\">\r\n                    {statusApp.message}\r\n                </Alert>\r\n            </Snackbar>\r\n            <Snackbar open={statusApp.status === \"failed\"} autoHideDuration={3000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\">\r\n                    {statusApp.message}\r\n                </Alert>\r\n            </Snackbar>\r\n        </>\r\n    );\r\n};\r\n","import {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../redux/store';\r\nimport {FilterValuesType, TaskStateType, TodoListContainerType, TodoListDomainType} from '../../redux/types/Types';\r\nimport React, {useCallback, useEffect} from 'react';\r\nimport {\r\n    addTodolistTC,\r\n    deleteTodoListTC,\r\n    getTodoListsTC,\r\n    updateTitleTodoListTC\r\n} from '../../redux/reducers/TodoListReducers';\r\nimport {createTaskTC} from '../../redux/reducers/TaskReducer';\r\nimport {Grid, Paper} from '@material-ui/core';\r\nimport {TodoList} from './TodoList';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Snackbars} from \"../common/SnackBars\";\r\nimport {AddItemFormContainer} from \"../FormComponents/AddItemFormFormik\";\r\nimport {actionsTodoList} from \"../../redux/actions/Actions\";\r\n\r\nconst TodoListContainer: React.FC<TodoListContainerType> = props => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodoListsTC());\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todoListID: string) => {\r\n        dispatch(createTaskTC(todoListID, title));\r\n    }, [dispatch]);\r\n    const changeTaskFilter = useCallback((value: FilterValuesType, todoListID: string) => {\r\n        dispatch(actionsTodoList.changeTodoListFilter(todoListID, value));\r\n    }, [dispatch]);\r\n    const changeTodoListTitle = useCallback((todoListID: string, title: string) => {\r\n        dispatch(updateTitleTodoListTC(todoListID, title));\r\n    }, [dispatch]);\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        dispatch(deleteTodoListTC(todoListID));\r\n    }, [dispatch]);\r\n\r\n    const todoListsJSX = props.todoLists.map(tl => {\r\n        let taskForTodoList = props.tasks[tl.id];\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={10} className={'paper_style'}>\r\n                    <TodoList todoList={tl}\r\n                              tasks={taskForTodoList}\r\n                              changeFilter={changeTaskFilter}\r\n                              addTask={addTask}\r\n                              removeTodoList={removeTodoList}\r\n                              changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <>\r\n            {todoListsJSX}\r\n        </>\r\n    )\r\n}\r\n\r\nexport const TodoPage = () => {\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.isAuth.isAuth);\r\n    const todoLists = useSelector<AppRootStateType, TodoListDomainType[]>(state => state.todoLists);\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks);\r\n    const dispatch = useDispatch();\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title));\r\n    }, [dispatch]);\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px'}}>\r\n                <AddItemFormContainer onSubmit={addTodoList} disable={false}/>\r\n            </Grid>\r\n            <Grid container spacing={5} style={{marginTop: '25px',justifyContent:\"center\"}}>\r\n                <TodoListContainer todoLists={todoLists} tasks={tasks}/>\r\n            </Grid>\r\n            <Snackbars/>\r\n        </>\r\n    )\r\n}\r\n","import {ActionsType, MeProfileType} from '../types/Types';\r\nimport {AppThunkType} from \"../store\";\r\nimport {APIAuthMe} from \"../../DAL/APIAuthMe\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {actionsIsAuth, actionsStatusApp} from \"../actions/Actions\";\r\n\r\nconst initialState: MeProfileType = {\r\n    id: 0,\r\n    login: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    rememberMe: false,\r\n    captcha: false,\r\n    isAuth: false,\r\n}\r\nconst actions = {\r\n    ...actionsIsAuth,\r\n    ...actionsStatusApp,\r\n}\r\n\r\nexport const IsAuthReducer = (state: MeProfileType = initialState, action: ActionsType<typeof actions>): MeProfileType => {\r\n    switch (action.type) {\r\n        case \"SET-ME-DATA\":\r\n            return {...state, ...action.data,isAuth:action.isAuth};\r\n        case \"LOG-OUT\":\r\n            return {id:0,login:\"\",email:\"\",password:\"\",rememberMe:false,captcha:false,isAuth:false};\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const authMe = (): AppThunkType => async dispatch => {\r\n    dispatch(actions.setStatusApp(\"load\"));\r\n    try {\r\n        const result = await APIAuthMe.me();\r\n        dispatch(actions.setMeData(result.data,true));\r\n        dispatch(actions.setStatusApp(\"idle\"));\r\n    } catch (e) {\r\n        dispatch(actions.setStatusApp(\"failed\"));\r\n        dispatch(actions.setMessageStatus(e.message));\r\n        throw new Error(e.message);\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe?: boolean, captcha?: boolean): AppThunkType => async dispatch => {\r\n    dispatch(actions.setStatusApp(\"load\"));\r\n    try {\r\n        const result = await APIAuthMe.login(email, password, rememberMe, captcha);\r\n        if (result.resultCode === 0)\r\n        {\r\n            dispatch(authMe());\r\n            dispatch(actions.setStatusApp(\"idle\"));\r\n        }else{\r\n            dispatch(stopSubmit(\"login\",{_error:result.messages[0]}));\r\n        }\r\n    } catch (e) {\r\n        dispatch(actions.setStatusApp(\"failed\"));\r\n        dispatch(actions.setMessageStatus(e.message));\r\n        throw new Error(e.message);\r\n    }\r\n}\r\n\r\nexport const logOut = (): AppThunkType => async dispatch => {\r\n    dispatch(actions.setStatusApp(\"load\"));\r\n    try {\r\n        const result = await APIAuthMe.logOut();\r\n        result.resultCode === 0 &&\r\n        dispatch(actions.logOut());\r\n        dispatch(actions.setStatusApp(\"idle\"));\r\n    } catch (e) {\r\n        dispatch(actions.setStatusApp(\"failed\"));\r\n        dispatch(actions.setMessageStatus(e.message));\r\n        throw new Error(e.message);\r\n    }\r\n}","import React from \"react\";\r\nimport {Button, Checkbox, FormControlLabel, makeStyles, Paper, TextField} from \"@material-ui/core\";\r\nimport {createStyles} from \"@material-ui/core/styles\";\r\nimport {FormikProps, useFormik, withFormik} from \"formik\";\r\nimport {FormDataLoginType} from \"../../redux/types/Types\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface ValuesType {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\ninterface FormFormikProps {\r\n    onSubmit: (formData: FormDataLoginType) => void\r\n}\r\ninterface MyFormProps {\r\n    initialEmail?: string;\r\n    initialPassword?: string;\r\n    initialRememberMe?: boolean;\r\n    initialCaptcha?: boolean\r\n    onSubmit: (formData: FormDataLoginType) => void\r\n}\r\n\r\nconst Form: React.FC<FormFormikProps & FormikProps<ValuesType>> = React.memo(props => {\r\n    const classes = useStyles();\r\n    const {touched, errors} = props;\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false,\r\n        },\r\n        validationSchema: Yup.object().shape({\r\n            email: Yup.string().email('Invalid email').required('Required'),\r\n            password: Yup.string().min(8,'Must be 8 characters or more').required('Required'),\r\n        }),\r\n        onSubmit: values => {\r\n            props.onSubmit(values)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <Paper elevation={8} className={classes.paper}>\r\n                <h1>Login</h1>\r\n                <TextField label={\"Email\"}\r\n                           {...formik.getFieldProps(\"email\")}/>\r\n                {touched.email && errors.email && <div>{errors.email}</div>}\r\n                <TextField label={\"Password\"}\r\n                           type={\"password\"}\r\n                           {...formik.getFieldProps(\"password\")}/>\r\n                {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                <FormControlLabel control={<Checkbox color={\"primary\"}\r\n                                                     checked={formik.values.rememberMe}\r\n                                                     {...formik.getFieldProps(\"rememberMe\")}/>}\r\n                                  label={\"Remember me\"}/>\r\n                <Button type=\"submit\" variant={\"outlined\"} color={\"primary\"}>\r\n                    Submit\r\n                </Button>\r\n            </Paper>\r\n        </form>\r\n    )\r\n})\r\n\r\nexport const FormLoginContainer = withFormik<MyFormProps, ValuesType>({\r\n    mapPropsToValues: props => {\r\n        return {\r\n            email: props.initialEmail || '',\r\n            password: props.initialPassword || '',\r\n            rememberMe: props.initialRememberMe || false,\r\n            onSubmit: props.onSubmit\r\n        };\r\n    },\r\n    handleSubmit: (values,form) => {\r\n        form.props.onSubmit(values);\r\n    },\r\n})(Form);\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        paper: {\r\n            minWidth: '300px',\r\n            minHeight: '350px',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            justifyContent: 'space-around',\r\n        },\r\n    })\r\n)\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../redux/reducers/IsAuthReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\nimport {Grid, makeStyles} from \"@material-ui/core\";\r\nimport {createStyles} from \"@material-ui/core/styles\";\r\nimport React, {useCallback} from 'react'\r\nimport {FormDataLoginType} from \"../../redux/types/Types\";\r\nimport {FormLoginContainer} from \"../FormComponents/LoginFormFormik\";\r\n\r\nexport const LoginPage = React.memo(() => {\r\n\r\n        const dispatch = useDispatch();\r\n        const isAuth = useSelector<AppRootStateType, boolean>(state => state.isAuth.isAuth);\r\n        const classes = useStyles();\r\n\r\n        const signIn = useCallback((formData: FormDataLoginType) => {\r\n            if (formData.rememberMe === undefined) formData.rememberMe = false;\r\n            if (formData.captcha === undefined) formData.captcha = false;\r\n            dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha));\r\n        }, [dispatch])\r\n\r\n        if (isAuth) {\r\n            return <Redirect to={'/todolists'}/>\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Grid container spacing={5} className={classes.login}>\r\n                    <FormLoginContainer onSubmit={signIn}/>\r\n                </Grid>\r\n            </>\r\n        )\r\n    }\r\n)\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        login: {\r\n            display: 'flex',\r\n            flexDirection: \"column\",\r\n            alignContent: 'center',\r\n            marginTop: '50px',\r\n        },\r\n    })\r\n)\r\n","import {AppBar, Button, IconButton, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\nimport {StatusType} from \"../../redux/reducers/StatusAppReducer\";\r\nimport {logOut} from \"../../redux/reducers/IsAuthReducer\";\r\n\r\ntype HeaderType = {\r\n    status: StatusType\r\n    isAuth: boolean\r\n    userLogin: string\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC<HeaderType> = props => {\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                    <Menu/>\r\n                </IconButton>\r\n                <Typography variant=\"h6\">\r\n                    TodoList\r\n                </Typography>\r\n                {\r\n                    props.isAuth\r\n                        ? <>\r\n                            <Button onClick={props.logout} color={\"inherit\"}>Log out</Button>\r\n                        </>\r\n                        : <Button color=\"inherit\">Login</Button>\r\n                }\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport const HeaderContainer = () => {\r\n    const status = useSelector<AppRootStateType, StatusType>(state => state.statusApp.status);\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.isAuth.isAuth);\r\n    const userLogin = useSelector<AppRootStateType, string>(state => state.isAuth.login);\r\n    const dispatch = useDispatch();\r\n\r\n    const logout = () => {\r\n        dispatch(logOut());\r\n    }\r\n\r\n    return <Header status={status} isAuth={isAuth} userLogin={userLogin} logout={logout}/>\r\n}","import {ActionsType} from \"../types/Types\";\r\nimport {actionsIsAuth, actionsStatusApp} from \"../actions/Actions\";\r\nimport {AppThunkType} from \"../store\";\r\nimport {APIAuthMe} from \"../../DAL/APIAuthMe\";\r\nimport {handleServerNetworkError} from \"../../utils/errorUtils\";\r\n\r\nexport type StatusType = \"idle\" | \"load\" | \"succeeded\" | \"failed\"\r\nexport type StatusAppType = {\r\n    message?: string\r\n    status: StatusType\r\n    isInitialized:boolean\r\n}\r\n\r\nconst initialState: StatusAppType = {\r\n    message: \"\",\r\n    status: \"idle\",\r\n    isInitialized:false,\r\n}\r\nconst actions = {\r\n    ...actionsStatusApp,\r\n    ...actionsIsAuth,\r\n}\r\n\r\nexport const StatusAppReducer = (state: StatusAppType = initialState, action: ActionsType<typeof actions>): StatusAppType => {\r\n    switch (action.type) {\r\n        case \"SET-APP-STATUS\":\r\n            return {...state, status: action.status}\r\n        case \"SET-MESSAGE-STATUS\":\r\n            return {...state, message: action.message}\r\n        case \"SET-APP-INITIALIZED\":\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const initializeApp = ():AppThunkType => async dispatch => {\r\n    try {\r\n        const me = await APIAuthMe.me();\r\n        if (me.resultCode === 0){\r\n            dispatch(actions.setMeData(me.data,true));\r\n        }\r\n        dispatch(actions.setAppInitialized(true));\r\n    }catch (error){\r\n        handleServerNetworkError(error, dispatch);\r\n    }\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {TodoPage} from '../components/todolist/TodoListContainer';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport {LoginPage} from \"../components/Login/Login\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../redux/store\";\r\nimport {HeaderContainer} from \"../components/header/Header\";\r\nimport {CircularProgress, Container, LinearProgress, makeStyles} from \"@material-ui/core\";\r\nimport {Snackbars} from \"../components/common/SnackBars\";\r\nimport {createStyles} from \"@material-ui/core/styles\";\r\nimport {initializeApp, StatusType} from \"../redux/reducers/StatusAppReducer\";\r\n\r\nexport function App() {\r\n    const statusApp = useSelector<AppRootStateType, StatusType>(state => state.statusApp.status);\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.statusApp.isInitialized);\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n\r\n    useEffect(()=>{\r\n        dispatch(initializeApp());\r\n    },[dispatch])\r\n\r\n    if (!isInitialized){\r\n        return <div className={classes.progress}>\r\n            <CircularProgress />\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <Switch>\r\n            <>\r\n                <HeaderContainer/>\r\n                {statusApp === \"load\" && <LinearProgress className={classes.load}/>}\r\n                <Container fixed className={classes.content}>\r\n                    <Route path={\"/todolists\"} component={TodoPage}/>\r\n                    <Route path={\"/login\"} component={LoginPage}/>\r\n                </Container>\r\n                <Snackbars/>\r\n            </>\r\n        </Switch>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        load: {\r\n            position: \"absolute\",\r\n            width: '100%',\r\n        },\r\n        progress:{\r\n            position: \"absolute\",\r\n            width: \"100%\",\r\n            height:\"100%\",\r\n            display:\"flex\",\r\n            justifyContent:\"center\",\r\n            alignItems:\"center\",\r\n        },\r\n        page:{\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n        },\r\n        content:{\r\n            maxWidth: \"90%\",\r\n        }\r\n    }),\r\n);\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {TaskReducer} from './reducers/TaskReducer';\r\nimport {TodoListReducers} from './reducers/TodoListReducers';\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk';\r\nimport {ActionsType} from './types/Types';\r\nimport {IsAuthReducer} from \"./reducers/IsAuthReducer\";\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {StatusAppReducer} from \"./reducers/StatusAppReducer\";\r\nimport {actionsIsAuth, actionsStatusApp, actionsTask, actionsTodoList} from \"./actions/Actions\";\r\n\r\nconst actions = {\r\n    ...actionsTodoList,\r\n    ...actionsTask,\r\n    ...actionsStatusApp,\r\n    ...actionsIsAuth,\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: TodoListReducers,\r\n    tasks: TaskReducer,\r\n    statusApp: StatusAppReducer,\r\n    isAuth:IsAuthReducer,\r\n    form:formReducer,\r\n});\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType,\r\n    AppRootStateType,\r\n    unknown,\r\n    ActionsType<typeof actions>>\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {App} from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>\r\n    , document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}