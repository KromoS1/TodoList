{"version":3,"sources":["serviceWorker.ts","redux/types/Types.ts","DAL/APIAuthMe.ts","DAL/APITodoLists.ts","redux/actions/Actions.ts","utils/errorUtils.ts","redux/reducers/TodoListReducers.ts","DAL/APITasks.ts","redux/reducers/TaskReducer.ts","components/common/ButtonFilter.tsx","components/common/DatesTask.tsx","components/FormComponents/EditableSpanFormik.tsx","components/task/PageUpdateTask.tsx","components/task/Task.tsx","components/FormComponents/AddItemFormFormik.tsx","components/todolist/TodoList.tsx","components/common/SnackBars.tsx","components/todolist/TodoListContainer.tsx","redux/reducers/IsAuthReducer.ts","components/FormComponents/LoginFormFormik.tsx","components/Login/Login.tsx","components/header/Header.tsx","redux/reducers/StatusAppReducer.ts","app/App.tsx","redux/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","axiosInstance","axios","create","baseURL","withCredentials","headers","APIAuthMe","get","then","response","data","email","password","rememberMe","captcha","post","delete","APITodoLists","res","title","id","put","actionsTodoList","getTodoLists","todoLists","type","addTodoList","todoList","removeTodoList","todoListId","changeTodoListTitle","todoListID","changeTodoListFilter","filter","addTasksTodoList","isDisable","disable","actionsTask","getTask","tasks","addTask","task","removeTask","idTask","changeTask","actionsStatusApp","setStatusApp","status","setMessageStatus","message","setAppInitialized","isInitialized","actionsIsAuth","setMeData","isAuth","logOut","handleServerAppError","dispatch","messages","length","handleServerNetworkError","error","initialState","actions","APITasks","items","property","resultCode","getTasks","idTodolist","a","ButtonFilter","React","memo","props","titleP","filterP","onClickHandlerP","Button","variant","onClick","color","DatesTask","date","nameDate","useState","dateValue","setDateValue","classes","useStyles","className","container","noValidate","TextField","label","defaultValue","onChange","e","currentTarget","value","saveDate","textFieldTitle","InputLabelProps","shrink","makeStyles","theme","createStyles","display","flexWrap","margin","marginLeft","spacing","marginRight","width","priorities","Form","priority","setPriority","schema","Yup","shape","max","trim","formik","useFormik","initialValues","validationSchema","onSubmit","values","resetForm","changeTitle","handleSubmit","select","event","target","helperText","disabled","autoFocus","map","option","MenuItem","style","position","errors","getFieldProps","EditableSpanForm","withFormik","mapPropsToValues","form","EditableSpanFormik","editMode","setEditMode","saveTitle","useCallback","Tooltip","placement","substr","maxWidth","textFieldPriority","PageUpdateTask","useDispatch","useEffect","description","textDesc","setTextDesc","setTask","dateComp","push","Box","root","zIndex","Paper","elevation","box","header","IconButton","showDetails","font","newPriority","Number","content","dates","addedDate","startDate","deadline","multiline","rows","fullWidth","size","button","startIcon","height","top","left","backgroundColor","borderRadius","fontSize","fontWeight","justifyContent","Task","setShowDetails","onClickRemoveTask","showDetailsTask","onChangeTask","model","changeTaskTitle","taskJSX","GreenCheckbox","checked","InProgress","New","Delete","TaskContainer","todolistId","getState","find","tl","Error","modelAPI","order","item","updateTask","undefined","taskForTodoList","t","el","withStyles","green","Checkbox","AddBox","AddItemFormContainer","TodoList","setValue","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","todolist","listTasks","BottomNavigation","showLabels","bntNav","newValue","marginTop","overflowY","overflow","minWidth","maxHeight","Alert","Snackbars","statusApp","useSelector","state","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","TodoListContainer","createTaskTC","changeTaskFilter","updateTitleTodoListTC","todoListsJSX","Grid","TodoPage","addTodolistTC","padding","to","login","touched","required","min","paper","FormControlLabel","control","FormLoginContainer","initialEmail","initialPassword","initialRememberMe","minHeight","flexDirection","alignItems","LoginPage","signIn","formData","result","stopSubmit","_error","alignContent","Header","AppBar","Toolbar","edge","aria-label","Menu","Typography","logout","HeaderContainer","userLogin","App","me","LinearProgress","load","Container","fixed","path","component","progress","CircularProgress","page","rootReducer","combineReducers","action","isLoad","key","copyState","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"2OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WC4BMC,EAOAC,E,yDChDCC,E,OAAgBC,EAAMC,OAAO,CACtCC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAINC,EAAY,WAEjB,OAAON,EAAcO,IAAqC,WACrDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAH1BJ,EAAY,SAKfK,EAAaC,EAAgBC,EAAoBC,GACnD,OAAOd,EAAce,KAA2C,aAAa,CAACJ,QAAMC,WAASC,aAAWC,YACnGN,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAP1BJ,EAAY,WAUjB,OAAON,EAAcgB,OAA4B,cAC5CR,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCpB1BO,EAAe,WAEpB,OAAOjB,EAAcO,IAA0B,cAC1CC,MAAK,SAAAU,GAAG,OAAIA,EAAIR,SAHhBO,EAAe,SAKjBE,GACH,OAAOnB,EAAce,KAAqD,aAAc,CAACI,UACpFX,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAP1BO,EAAe,SASZE,EAAeC,GACvB,OAAOpB,EAAcqB,IAAd,qBAAqDD,GAAM,CAACD,UAC9DX,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAX1BO,EAAe,SAajBG,GACH,OAAOpB,EAAcgB,OAAd,qBAAwDI,IAC1DZ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SChB1BY,EAAkB,CAC3BC,aAAc,SAACC,GAAD,MAAsC,CAACC,KAAM,iBAAkBD,cAC7EE,YAAa,SAACC,GAAD,MAAmC,CAACF,KAAM,eAAgBE,aACvEC,eAAgB,SAACC,GAAD,MAAyB,CAACJ,KAAM,kBAAmBI,eACnEC,oBAAqB,SAACC,EAAoBZ,GAArB,MAAwC,CACzDM,KAAM,wBACNM,aACAZ,UAEJa,qBAAsB,SAACD,EAAoBE,GAArB,MAAmD,CACrER,KAAM,yBACNM,aACAE,WAEJC,iBAAkB,SAACL,GAAD,MAAyB,CAACJ,KAAM,yBAA0BI,eAC5EM,UAAU,SAACC,EAAiBP,GAAlB,MAAyC,CAACJ,KAAK,aAAaW,UAAQP,gBAGrEQ,EAAa,CACtBC,QAAS,SAACT,EAAoBU,GAArB,MAA4C,CAACd,KAAM,WAAYI,aAAYU,UACpFC,QAAS,SAACC,GAAD,MAAqB,CAAChB,KAAM,WAAYgB,SACjDC,WAAY,SAACC,EAAgBd,GAAjB,MAAyC,CAACJ,KAAM,cAAeI,aAAYc,WACvFC,WAAY,SAACf,EAAoBc,EAAgBF,GAArC,MAAyD,CACjEhB,KAAM,cACNI,aACAc,SACAF,UAIKI,EAAmB,CAC5BC,aAAc,SAACC,GAAD,MAAwB,CAACtB,KAAK,iBAAiBsB,WAC7DC,iBAAiB,SAACC,GAAD,MAAsB,CAACxB,KAAK,qBAAqBwB,YAClEC,kBAAkB,SAACC,GAAD,MAA4B,CAAC1B,KAAK,sBAAsB0B,mBAGjEC,EAAgB,CACzBC,UAAW,SAAC3C,EAAgB4C,GAAjB,MAAqC,CAAC7B,KAAM,cAAcf,OAAK4C,WAC1EC,OAAO,iBAAO,CAAC9B,KAAK,aClCX+B,EAAuB,SAAI9C,EAA8B+C,GAE9D/C,EAAKgD,SAASC,OACdF,EAASZ,EAAiBG,iBAAiBtC,EAAKgD,SAAS,KAEzDD,EAASZ,EAAiBG,iBAAiB,yBAE/CS,EAASZ,EAAiBC,aAAa,YAG9Bc,EAA2B,SAACC,EAA4BJ,GACjEA,EAASZ,EAAiBG,iBAAiBa,EAAMZ,UACjDQ,EAASZ,EAAiBC,aAAa,YCbrCgB,EAAqC,GACrCC,EAAO,2BACNzC,GACAuB,G,QCLMmB,EAAW,SAChB5C,GACA,OAAOpB,EAAcO,IAAd,sBAA8Da,EAA9D,WACFZ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKuD,UAH/BD,EAAW,SAKb5C,EAAYD,GACf,OAAOnB,EAAce,KAAd,sBAA2EK,EAA3E,UAAuF,CAACD,UAC1FX,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAP1BsD,EAAW,SASRnC,EAAoBc,EAAgBuB,GAC5C,OAAOlE,EAAcqB,IAAd,sBAA0EQ,EAA1E,kBAA8Fc,GAA9F,eAA4GuB,IAC9G1D,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAX1BsD,EAAW,SAabnC,EAAoBc,GACvB,OAAO3C,EAAcgB,OAAd,sBAAyDa,EAAzD,kBAA6Ec,IAC/EnC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKyD,eCPtCL,EAA8B,GAC9BC,EAAO,uCACN1B,GACAQ,GACAvB,GA4BM8C,EAAW,SAACC,GAAD,8CAAsC,WAAMZ,GAAN,eAAAa,EAAA,6DAC1Db,EAASM,EAAQjB,aAAa,SAD4B,kBAGlCkB,EAAaK,GAHqB,OAGhD9B,EAHgD,OAItDkB,EAASM,EAAQzB,QAAQ+B,EAAY9B,IACrCkB,EAASM,EAAQjB,aAAa,SALwB,gDAOtDc,EAAyB,EAAD,GAAQH,GAPsB,yDAAtC,uD,8EClCXc,EAAeC,IAAMC,MAAM,SAACC,GAA4B,IAC1DC,EAAkCD,EAAlCC,OAAOC,EAA2BF,EAA3BE,QAAQC,EAAmBH,EAAnBG,gBACtB,OACI,8BACI,cAACC,EAAA,EAAD,CAAQC,QAASH,IAAYD,EAAS,YAAc,WAC5CK,QAASH,EACTI,MAAO,UAFf,SAE2BN,S,0ECN1BO,GAAY,SAACR,GAAqB,IACpCS,EAAiBT,EAAjBS,KAAKC,EAAYV,EAAZU,SAD8B,EAETC,mBAAiBF,GAFR,mBAEnCG,EAFmC,KAEzBC,EAFyB,KASpCC,EAAUC,KAEhB,OACI,sBAAMC,UAAWF,EAAQG,UAAWC,YAAU,EAA9C,SACI,cAACC,GAAA,EAAD,CACIzE,GAAG,iBACH0E,MAAOV,EACP3D,KAAK,iBACLsE,aAAcT,EACdU,SAdO,SAACC,GAChBV,EAAaU,EAAEC,cAAcC,OAC7BzB,EAAM0B,SAASd,IAaPI,UAAWF,EAAQa,eACnBC,gBAAiB,CACbC,QAAQ,QAQtBd,GAAYe,aAAW,SAACC,GAAD,OACzBC,aAAa,CACTf,UAAW,CACPgB,QAAS,OACTC,SAAU,OACVC,OAAO,cAEXR,eAAgB,CACZS,WAAYL,EAAMM,QAAQ,GAC1BC,YAAaP,EAAMM,QAAQ,GAC3BE,MAAO,U,2DC9BbC,GAAa,CACf,CACIf,MAAO,IACPL,MAAO,KAEX,CACIK,MAAO,IACPL,MAAO,KAEX,CACIK,MAAO,IACPL,MAAO,KAEX,CACIK,MAAO,IACPL,MAAO,MAITqB,GAAsD3C,IAAMC,MAAK,SAAAC,GAAU,IAAD,EAE5CW,mBAAS,KAFmC,mBAErE+B,EAFqE,KAE3DC,EAF2D,KAItE7B,EAAUC,KACV6B,EAASC,OAAaC,MAAM,CAC9BrG,MAAOoG,OAAaE,IAAI,IAAK,YAAYC,SAOvCC,EAASC,aAAU,CACrBC,cAAe,CACX1G,MAAOuD,EAAMvD,MACbM,KAAMiD,EAAMjD,KACZW,QAASsC,EAAMtC,SAEnB0F,iBAAkBR,EAClBS,SAAU,SAACC,EAAD,GAA0B,IAAhBC,EAAe,EAAfA,UAChBvD,EAAMwD,YAAYF,EAAO7G,OACzB8G,EAAU,OAIlB,MAAmB,aAAfvD,EAAMjD,KAEF,uBAAMsG,SAAUJ,EAAOQ,aAAvB,UACI,cAACtC,GAAA,EAAD,CACIzE,GAAG,2BACHgH,QAAM,EACNtC,MAAM,SACNK,MAAOiB,EACPpB,SAzBK,SAACqC,GAClBhB,EAAYgB,EAAMC,OAAOnC,QAyBboC,WAAW,8BACXC,SAAUb,EAAOK,OAAO5F,QAASqG,WAAS,EAP9C,SASKvB,GAAWwB,KAAI,SAACC,GAAD,OACZ,cAACC,GAAA,EAAD,CAA6BzC,MAAOwC,EAAOxC,MAA3C,SACKwC,EAAO7C,OADG6C,EAAOxC,YAM9B,qBAAK0C,MAAQ,CAACC,SAAU,SAAxB,SAAoCnB,EAAOoB,OAAO5H,MAAQ,8BAAMwG,EAAOoB,OAAO5H,QAAe,UAKjG,uBAAM4G,SAAUJ,EAAOQ,aAAvB,UACI,cAACtC,GAAA,EAAD,2BAAe8B,EAAOqB,cAAc,UAApC,IACWtD,UAAWF,EAAQa,eACnBmC,SAAUb,EAAOK,OAAO5F,QAASqG,WAAS,KACrD,qBAAKI,MAAQ,CAACC,SAAU,SAAxB,SAAoCnB,EAAOoB,OAAO5H,MAAQ,8BAAMwG,EAAOoB,OAAO5H,QAAe,aAOvG8H,GAAmBC,aAAkC,CACvDC,iBAAkB,SAAAzE,GACd,MAAO,CACHvD,MAAOuD,EAAMvD,MACbiB,QAASsC,EAAMtC,QACf2F,SAAUrD,EAAMwD,YAChBzG,KAAMiD,EAAMjD,OAGpB0G,aAAc,SAACH,EAAQoB,GACnBA,EAAK1E,MAAMwD,YAAYF,EAAO7G,SAVb+H,CAYtB/B,IAGUkC,GAA0C,SAAA3E,GAAU,IAAD,EAC5BW,oBAAkB,GADU,mBACrDiE,EADqD,KAC3CC,EAD2C,KAGtDC,EAAYC,uBAAY,SAACtI,GAC3BuD,EAAMwD,YAAY/G,GAClBoI,GAAY,KACb,CAAC7E,IAWJ,OACI,mCAEQ4E,EACM,cAACL,GAAD,CAAkBxH,KAAM,QAASN,MAAOuD,EAAMvD,MAC5B+G,YAAasB,EACbpH,QAASsC,EAAMtC,UACjC,cAACsH,GAAA,EAAD,CAASvI,MAAOuD,EAAMvD,MAAOwI,UAAW,MAAxC,SACF,sBAAM3E,QAAS,WACXuE,GAAY,IADhB,SAfR7E,EAAMvD,MAAMwC,OAAS,GACde,EAAMvD,MAAMyI,OAAO,EAAG,IAAM,MAE5BlF,EAAMvD,aAoBnBsE,GAAYe,aAAW,SAACC,GAAD,OACzBC,aAAa,CACTL,eAAgB,CACZwD,SAAU,SAEdC,kBAAmB,CACf,uBAAwB,CACpBjD,OAAQJ,EAAMM,QAAQ,GACtBE,MAAO,cC1IV8C,GAA+CvF,IAAMC,MAAK,SAAAC,GAEnE,IAAMjB,EAAWuG,cACjBC,qBAAU,WACNxG,EAASW,EAASM,EAAMjC,KAAKZ,eAC9B,IALyE,MAO5CwD,mBAAiBX,EAAMjC,KAAKyH,aAPgB,mBAOrEC,EAPqE,KAO3DC,EAP2D,OAQpD/E,mBAAQ,eAAeX,EAAMjC,OARuB,mBAQrEA,EARqE,KAQ/D4H,EAR+D,KAStElF,EAAiB,GACjBK,EAAUC,KAIVW,EAAW,SAACkE,GACdnF,EAAKoF,KAAKD,IAoBd,OACI,cAACE,EAAA,EAAD,CAAK9E,UAAWF,EAAQiF,KAAMC,OAAQ,UAAtC,SACI,cAACC,EAAA,EAAD,CAAOC,UAAW,GAAIlF,UAAWF,EAAQqF,IAAzC,SACI,iCACI,sBAAKnF,UAAWF,EAAQsF,OAAxB,UACI,8BACI,cAACC,EAAA,EAAD,CAAY/F,QAAS,kBAAMN,EAAMsG,eAAjC,SACI,cAAC,KAAD,QAGR,qBAAKtF,UAAWF,EAAQyF,KAAxB,SACI,+BAAOxI,EAAKtB,UAEhB,qBAAKuE,UAAWF,EAAQyF,KAAxB,SACI,cAAC,GAAD,CAAoB9J,MAAOsB,EAAK2E,SAAW,GAAIc,YA/BlD,SAACgD,GAClB,IAAM9D,EAA2B+D,OAAOD,GACxCb,EAAQ,2BAAI5H,GAAL,IAAW2E,eA6B4E3F,KAAM,kBAGxF,sBAAKiE,UAAWF,EAAQ4F,QAAxB,UACI,sBAAK1F,UAAWF,EAAQ6F,MAAxB,UACI,cAAC,GAAD,CAAWlG,KAAM1C,EAAK6I,UAAWlG,SAAU,cAAegB,SAAUA,IACpE,cAAC,GAAD,CAAWjB,KAAM1C,EAAK8I,UAAWnG,SAAU,aAAcgB,SAAUA,IACnE,cAAC,GAAD,CAAWjB,KAAM1C,EAAK+I,SAAUpG,SAAU,YAAagB,SAAUA,OAErE,qBAAKV,UAAWF,EAAQ0E,YAAxB,SACI,cAACrE,GAAA,EAAD,CAAWd,QAAS,WACToB,MAAOgE,EACPrE,MAAO,cACPE,SAlDd,SAACC,GAAD,OAAsCmE,EAAYnE,EAAEC,cAAcC,QAmDpDsF,WAAS,EACTC,KAAM,EACNC,WAAS,SAI5B,8BACI,cAAC7G,EAAA,EAAD,CACIC,QAAQ,WACRE,MAAM,UACN2G,KAAK,QACLlG,UAAWF,EAAQqG,OACnB7G,QApDP,WACb,IAAMd,EAAwC,CAC1CkD,SAAU3E,EAAK2E,SACf8C,YAAaC,EACbmB,UAAWnG,EAAK,GAChBoG,UAAWpG,EAAK,GAChBqG,SAAUrG,EAAK,IAEnBT,EAAM9B,WAAWsB,GACjBQ,EAAMsG,eA4Ccc,UAAW,cAAC,KAAD,IANf,8BAmClBrG,GAAYe,aAAW,SAACC,GAAD,MAAY,CACrCgE,KAAM,CACF9D,QAAS,OACTC,SAAU,OACV,QAAS,CACLC,OAAQJ,EAAMM,QAAQ,GACtBE,MAAO,OACP8E,OAAQ,QAEZC,IAAK,QACLC,KAAM,QACNnD,SAAU,WACVoD,gBAAiB,UACjBC,aAAc,QAElBtB,IAAK,CACDqB,gBAAiB,WAErBjB,KAAM,CACFmB,SAAU,OACVC,WAAY,OACZrF,YAAa,QAEjB8D,OAAQ,CACJnE,QAAS,OACT2F,eAAgB,gBAChBzF,OAAQ,uBAEZuE,QAAS,CACLzE,QAAS,OACT2F,eAAgB,gBAEpBjB,MAAO,GACPnB,YAAa,CACTjD,MAAO,SAEX4E,OAAQ,CACJhF,OAAQJ,EAAMM,QAAQ,W,SXjHlBjH,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,8BYrCCwM,GAAgC/H,IAAMC,MAAK,SAAAC,GAAU,IAAD,EACvBW,oBAAkB,GADK,mBACtD2F,EADsD,KACzCwB,EADyC,KAGvDC,EAAoBhD,uBAAY,WAClC/E,EAAMhC,WAAWgC,EAAMjC,KAAKrB,GAAIsD,EAAM7C,cACvC,CAAC6C,IACEgI,EAAkBjD,uBAAY,WAChC+C,GAAgBxB,KACjB,CAACA,IAEE2B,EAAelD,uBAAY,SAACmD,GAC9BlI,EAAM9B,WAAW8B,EAAM7C,WAAY6C,EAAMjC,KAAKrB,GAAIwL,KACnD,CAAClI,IACEmI,EAAkBpD,uBAAY,SAACtI,GACjCwL,EAAa,CAACxL,YACf,CAACwL,IAOEG,EACF,mCACI,sBAAKpH,UAAW,OAAhB,UACI,cAACqH,GAAD,CAAeC,QAAStI,EAAMjC,KAAKM,SAAWjD,EAAamN,WAC5CjH,SAVF,SAACC,GACtBA,EAAEC,cAAc8G,QACVL,EAAa,CAAC5J,OAAQjD,EAAamN,aACnCN,EAAa,CAAC5J,OAAQjD,EAAaoN,OAOU1E,SAAU9D,EAAMtC,UAC3D,cAAC,GAAD,CAAoBX,KAAM,QACNN,MAAOuD,EAAMjC,KAAKtB,MAClB+G,YAAa2E,EACbzK,QAASsC,EAAMtC,UACnC,cAAC2I,EAAA,EAAD,CAAY/F,QAAS0H,EAAiBlE,SAAU9D,EAAMtC,QAAtD,SACI,cAAC,KAAD,MAEJ,cAAC2I,EAAA,EAAD,CAAY/F,QAASyH,EAAmBjE,SAAU9D,EAAMtC,QAAxD,SACI,cAAC+K,EAAA,EAAD,QAXqBzI,EAAMjC,KAAKrB,MAiBhD,OACI4J,EACM,qCACE,cAACjB,GAAD,CAAgBtH,KAAMiC,EAAMjC,KAAMG,WAAY+J,EAAc3B,YAAa0B,IACxEI,KAEH,mCACGA,OAKJM,GAAkD,SAAA1I,GAC3D,IAAIoI,EACErJ,EAAWuG,cAEXpH,EAAa6G,uBAAY,SAAC4D,EAAoB1K,EAAgBiK,GAChEnJ,ELCkB,SAAC5B,EAAoBc,EAAgBiK,GAArC,8CACtB,WAAOnJ,EAAU6J,GAAjB,mBAAAhJ,EAAA,yDACIb,EAASM,EAAQjB,aAAa,SAC9BW,EAASM,EAAQ5B,WAAU,EAAKN,IAC1BY,EAAO6K,IAAW/K,MAAMV,GAAY0L,MAAK,SAAAC,GAAE,OAAIA,EAAGpM,KAAOuB,KAHnE,sBAKc,IAAI8K,MAAM,+BALxB,cAOUC,EAPV,aAQQvM,MAAOsB,EAAKtB,MACZwM,MAAOlL,EAAKkL,MACZzD,YAAazH,EAAKyH,YAClB9C,SAAU3E,EAAK2E,SACfrE,OAAQN,EAAKM,OACbuI,UAAW7I,EAAK6I,UAChBC,UAAW9I,EAAK8I,UAChBC,SAAU/I,EAAK+I,UACZoB,GAhBX,kBAmB2B5I,EAAqBnC,EAAYc,EAAQ+K,GAnBpE,OAoBgC,KADlBhN,EAnBd,QAoBiByD,YACLV,EAASM,EAAQnB,WAAWf,EAAYc,EAAQjC,EAAKA,KAAKkN,OAC1DnK,EAASM,EAAQjB,aAAa,cAC9BW,EAASM,EAAQf,iBAAiB,2BAClCS,EAASM,EAAQ5B,WAAU,EAAMN,KAEjC2B,EAAsC9C,EAAM+C,GA1BxD,kDA6BQG,EAAyB,EAAD,GAAQH,GAChCA,EAASM,EAAQ5B,WAAU,EAAMN,IA9BzC,0DADsB,wDKDTgM,CAAWR,EAAY1K,EAAQiK,MACzC,CAACnJ,IACEf,EAAa+G,uBAAY,SAACrI,EAAYW,GLmCtB,IAACF,EAAoBc,EKlCvCc,GLkCmB5B,EKlCCE,ELkCmBY,EKlCPvB,ELkCd,uCAAsD,WAAMqC,GAAN,SAAAa,EAAA,6DAC5Eb,EAASM,EAAQjB,aAAa,SAC9BW,EAASM,EAAQ5B,WAAU,EAAKN,IAF4C,kBAI/CmC,EAAgBnC,EAAYc,GAJmB,OAKrD,IALqD,SAMpEc,EAASM,EAAQrB,WAAWC,EAAQd,IACpC4B,EAASM,EAAQjB,aAAa,cAC9BW,EAASM,EAAQf,iBAAiB,2BAClCS,EAASM,EAAQ5B,WAAU,EAAMN,KATmC,gDAYxE+B,EAAyB,EAAD,GAAQH,GAChCA,EAASM,EAAQ5B,WAAU,EAAMN,IAbuC,yDAAtD,0DKjCnB,CAAC4B,IAEJ,QAAoBqK,IAAhBpJ,EAAMnC,MAAqB,CAC3B,IAAIwL,EAAkBrJ,EAAMnC,MACP,WAAjBmC,EAAMzC,SACN8L,EAAkBrJ,EAAMnC,MAAMN,QAAO,SAAA+L,GAAC,OAAIA,EAAEjL,SAAWjD,EAAaoN,QAEnD,cAAjBxI,EAAMzC,SACN8L,EAAkBrJ,EAAMnC,MAAMN,QAAO,SAAA+L,GAAC,OAAIA,EAAEjL,SAAWjD,EAAamN,eAExEH,EAAUiB,EAAgBrF,KAAI,SAAAuF,GAAE,OAC5B,cAAC1B,GAAD,CACM9J,KAAMwL,EACN7L,QAASsC,EAAMtC,QACfP,WAAY6C,EAAM7C,WAClBa,WAAYA,EACZE,WAAYA,GALPqL,EAAG7M,OAStB,OACI,mCACK0L,KAMPC,GAAgBmB,YAAW,CAC7BzD,KAAM,CACFxF,MAAOkJ,IAAM,KACb,YAAa,CACTlJ,MAAOkJ,IAAM,OAGrBnB,QAAS,IAPSkB,EAQnB,SAACxJ,GAAD,OAA0B,cAAC0J,EAAA,EAAD,aAAUnJ,MAAM,WAAcP,O,UCnGrDyC,GAAsD3C,IAAMC,MAAK,SAAAC,GAEnE,IAAMiD,EAASC,aAAU,CACrBC,cAAe,CACX1G,MAAO,IAEX2G,iBAAkBP,OAAaC,MAAM,CACjCrG,MAAOoG,OAAaG,KAAK,6DAA6DD,IAAI,IAAK,cAEnGM,SAAU,SAACC,EAAD,GAA0B,IAAhBC,EAAe,EAAfA,UAChBvD,EAAMqD,SAASC,EAAO7G,OACtB8G,EAAU,OAIlB,OACI,uBAAMF,SAAUJ,EAAOQ,aAAcU,MAAQ,CAACC,SAAS,YAAvD,UACI,cAACjD,GAAA,EAAD,2BAAe8B,EAAOqB,cAAc,UAApC,IACWjE,QAAS,WAAYyD,SAAU9D,EAAMtC,QACrCwJ,KAAM,QACN9F,MAAO6B,EAAOoB,OAAO5H,MAAQ,QAAU,QACtC0C,WAA+BiK,IAAxBnG,EAAOoB,OAAO5H,MACtBoH,WAAYZ,EAAOoB,OAAO5H,MAAQwG,EAAOoB,OAAO5H,MAAQ,QAEnE,cAAC4J,EAAA,EAAD,CAAY9F,MAAO,UAAWuD,SAAU9D,EAAMtC,QAASX,KAAM,SAA7D,SACI,cAAC4M,GAAA,EAAD,YAOHC,GAAuBpF,aAAkC,CAClEC,iBAAkB,SAAAzE,GACd,MAAO,CACHvD,MAAO,GACPiB,QAASsC,EAAMtC,QACf2F,SAAUrD,EAAMqD,WAGxBI,aAAc,SAACH,EAAQoB,GACnBA,EAAK1E,MAAMqD,SAASC,EAAO7G,SATC+H,CAWjC/B,IC/CUoH,GAAwC/J,IAAMC,MAAK,SAAAC,GAE5D,IAAMjB,EAAWuG,cACXxE,EAAUC,KAHqD,EAI3CJ,mBAAiB,GAJ0B,mBAI9Dc,EAJ8D,KAIvDqI,EAJuD,KAMrEvE,qBAAU,WACNxG,EAASW,EAASM,EAAM/C,SAASP,OAClC,CAACqC,EAASiB,EAAM/C,SAASP,KAE5B,IAAMoB,EAAUiH,uBAAY,SAACtI,GACzBuD,EAAMlC,QAAQrB,EAAOuD,EAAM/C,SAASP,MACrC,CAACsD,IAEE+J,EAAoBhF,uBAAY,kBAAM/E,EAAMgK,aAAa,MAAOhK,EAAM/C,SAASP,MAAK,CAACsD,IACrFiK,EAAuBlF,uBAAY,kBAAM/E,EAAMgK,aAAa,SAAUhK,EAAM/C,SAASP,MAAK,CAACsD,IAC3FkK,EAA0BnF,uBAAY,kBAAM/E,EAAMgK,aAAa,YAAahK,EAAM/C,SAASP,MAAK,CAACsD,IAGjG5C,EAAsB2H,uBAAY,SAACtI,GACrCuD,EAAM5C,oBAAoB4C,EAAM/C,SAASP,GAAID,KAC9C,CAACuD,IAEJ,OACI,sBAAKgB,UAAWF,EAAQqJ,SAAxB,UACI,qBAAInJ,UAAW,aAAf,UACI,cAAC,GAAD,CAAoBvE,MAAOuD,EAAM/C,SAASR,MACtB+G,YAAapG,EACbL,KAAM,QACNW,QAASsC,EAAM/C,SAASS,UAC5C,cAAC2I,EAAA,EAAD,CAAY/F,QAZM,kBAAMN,EAAM9C,eAAe8C,EAAM/C,SAASP,KAYhBoH,SAAU9D,EAAM/C,SAASS,QAArE,SACI,cAAC+K,EAAA,EAAD,SAGR,cAACmB,GAAD,CAAsBvG,SAAUvF,EAASJ,QAASsC,EAAM/C,SAASS,UACjE,qBAAKsD,UAAWF,EAAQsJ,UAAxB,SACI,cAAC,GAAD,CAAejN,WAAY6C,EAAM/C,SAASP,GAC3BmB,MAAOmC,EAAMnC,MACbN,OAAQyC,EAAM/C,SAASM,OACvBG,QAASsC,EAAM/C,SAASS,YAE3C,eAAC2M,EAAA,EAAD,CAAkB5I,MAAOA,EACP6I,YAAU,EACVtJ,UAAWF,EAAQyJ,OACnBjJ,SAAU,SAACqC,EAAO6G,GAAcV,EAASU,IAH3D,UAII,cAAC3K,EAAD,CAAcI,OAAQ,MAAOC,QAASF,EAAM/C,SAASM,OAAQ4C,gBAAiB4J,IAC9E,cAAClK,EAAD,CAAcI,OAAQ,SAAUC,QAASF,EAAM/C,SAASM,OAAQ4C,gBAAiB8J,IACjF,cAACpK,EAAD,CAAcI,OAAQ,YAAaC,QAASF,EAAM/C,SAASM,OAAQ4C,gBAAiB+J,IANxF,aAYNnJ,GAAYe,YAAW,CACzByI,OAAQ,GAERH,UAAU,CACNK,UAAU,OACVC,UAAU,SACVrD,OAAO,SAEX8C,SAAS,CACLQ,SAAS,SACTC,SAAU,IACVC,UAAU,O,6BCnEZC,GAAQ,SAAC9K,GAAD,OAAuB,cAAC,KAAD,aAAUkG,UAAW,EAAG7F,QAAQ,UAAaL,KAErE+K,GAAY,WAErB,IAAMC,EAAYC,aAA6C,SAAAC,GAAK,OAAIA,EAAMF,aACxEjM,EAAWuG,cAGX6F,EAAc,SAACxH,EAA8ByH,GAChC,cAAXA,IAGJrM,EAASZ,EAAiBC,aAAa,SACvCW,EAASZ,EAAiBG,iBAAiB,OAG/C,OACI,qCACI,cAAC+M,GAAA,EAAD,CAAUC,KAA2B,cAArBN,EAAU3M,OAAwBkN,iBAAkB,IAAMC,QAASL,EAAnF,SACI,cAAC,GAAD,CAAOK,QAASL,EAAaM,SAAS,UAAtC,SACKT,EAAUzM,YAGnB,cAAC8M,GAAA,EAAD,CAAUC,KAA2B,WAArBN,EAAU3M,OAAqBkN,iBAAkB,IAAMC,QAASL,EAAhF,SACI,cAAC,GAAD,CAAOK,QAASL,EAAaM,SAAS,QAAtC,SACKT,EAAUzM,gBCfzBmN,GAAqD,SAAA1L,GAEvD,IAAMjB,EAAWuG,cAEjBC,qBAAU,WACNxG,EXSsB,uCAAoB,WAAMA,GAAN,eAAAa,EAAA,6DAC9Cb,EAASM,EAAQjB,aAAa,SADgB,kBAGlB7B,IAHkB,OAGpCO,EAHoC,OAI1CiC,EAASM,EAAQxC,aAAaC,IAC9BiC,EAASM,EAAQjB,aAAa,SALY,gDAO1Cc,EAAyB,EAAD,GAAQH,GAPU,yDAApB,yDWRvB,CAACA,IAEJ,IAAMjB,EAAUiH,uBAAY,SAACtI,EAAeY,GACxC0B,ET4BoB,SAACY,EAAoBlD,GAArB,8CAAqD,WAAMsC,GAAN,eAAAa,EAAA,6DAC7Eb,EAASM,EAAQjB,aAAa,SAC9BW,EAASM,EAAQ5B,WAAU,EAAKkC,IAF6C,kBAItDL,EAAgBK,EAAYlD,GAJ0B,OAKjD,KADlBT,EAJmE,QAKhEyD,YACLV,EAASM,EAAQvB,QAAQ9B,EAAKA,KAAKkN,OACnCnK,EAASM,EAAQjB,aAAa,cAC9BW,EAASM,EAAQf,iBAAiB,4BAClCS,EAASM,EAAQ5B,WAAU,EAAMkC,MAEjCb,EAAsC9C,EAAM+C,GAC5CA,EAASM,EAAQ5B,WAAU,EAAMkC,KAZoC,gDAezET,EAAyB,EAAD,GAAQH,GAChCA,EAASM,EAAQ5B,WAAU,EAAMkC,IAhBwC,yDAArD,sDS5BXgM,CAAatO,EAAYZ,MACnC,CAACsC,IACE6M,EAAmB7G,uBAAY,SAACtD,EAAyBpE,GAC3D0B,EAASnC,EAAgBU,qBAAqBD,EAAYoE,MAC3D,CAAC1C,IACE3B,EAAsB2H,uBAAY,SAAC1H,EAAoBZ,GACzDsC,EX+C6B,SAACrC,EAAYD,GAAb,8CAA6C,WAAMsC,GAAN,eAAAa,EAAA,6DAC9Eb,EAASM,EAAQjB,aAAa,SAC9BW,EAASM,EAAQ5B,WAAU,EAAMf,IAF6C,kBAIvDH,EAAyBE,EAAOC,GAJuB,OAKlD,KADlBV,EAJoE,QAKjEyD,YACLV,EAASM,EAAQjC,oBAAoBV,EAAID,IACzCsC,EAASM,EAAQjB,aAAa,cAC9BW,EAASM,EAAQf,iBAAiB,gCAClCS,EAASM,EAAQ5B,WAAU,EAAOf,KAElCoC,EAAqB9C,EAAM+C,GAX2C,gDAc1EG,EAAyB,EAAD,GAAQH,GAChCA,EAASM,EAAQ5B,WAAU,EAAOf,IAfwC,yDAA7C,sDW/CpBmP,CAAsBxO,EAAYZ,MAC5C,CAACsC,IACE7B,EAAiB6H,uBAAY,SAAC1H,GXyBR,IAACX,EWxBzBqC,GXwByBrC,EWxBCW,EXwBF,uCAA8B,WAAM0B,GAAN,eAAAa,EAAA,6DAC1Db,EAASM,EAAQjB,aAAa,SAC9BW,EAASM,EAAQ5B,WAAU,EAAMf,IAFyB,kBAInCH,EAAoBG,GAJe,OAK9B,KADlBV,EAJgD,QAK7CyD,YACLV,EAASM,EAAQnC,eAAeR,IAChCqC,EAASM,EAAQnC,eAAeR,IAChCqC,EAASM,EAAQjB,aAAa,cAC9BW,EAASM,EAAQf,iBAAiB,gCAClCS,EAASM,EAAQ5B,WAAU,EAAOf,KAElCoC,EAAqB9C,EAAM+C,GAZuB,gDAetDG,EAAyB,EAAD,GAAQH,GAChCA,EAASM,EAAQ5B,WAAU,EAAOf,IAhBoB,yDAA9B,0DWvBzB,CAACqC,IAEE+M,EAAe9L,EAAMlD,UAAUkH,KAAI,SAAA8E,GACrC,IAAIO,EAAkBrJ,EAAMnC,MAAMiL,EAAGpM,IACrC,OACI,cAACqP,EAAA,EAAD,CAAM7C,MAAI,EAAV,SACI,cAACjD,EAAA,EAAD,CAAOC,UAAW,GAAIlF,UAAW,cAAjC,SACI,cAAC6I,GAAD,CAAU5M,SAAU6L,EACVjL,MAAOwL,EACPW,aAAc4B,EACd9N,QAASA,EACTZ,eAAgBA,EAChBE,oBAAqBA,OAPvB0L,EAAGpM,OAc3B,OACI,mCACKoP,KAKAE,GAAW,WACpB,IAAMpN,EAASqM,aAAuC,SAAAC,GAAK,OAAIA,EAAMtM,OAAOA,UACtE9B,EAAYmO,aAAoD,SAAAC,GAAK,OAAIA,EAAMpO,aAC/Ee,EAAQoN,aAA6C,SAAAC,GAAK,OAAIA,EAAMrN,SACpEkB,EAAWuG,cAEXtI,EAAc+H,uBAAY,SAACtI,GAC7BsC,EX3BqB,SAACtC,GAAD,8CAAiC,WAAMsC,GAAN,eAAAa,EAAA,6DAC1Db,EAASM,EAAQjB,aAAa,SAD4B,kBAG/B7B,EAAoBE,GAHW,OAI1B,KADtBQ,EAHgD,QAIzCwC,YACTV,EAASM,EAAQrC,YAAYC,EAASjB,KAAKkN,OAC3CnK,EAASM,EAAQ7B,iBAAiBP,EAASjB,KAAKkN,KAAKxM,KACrDqC,EAASM,EAAQjB,aAAa,cAC9BW,EAASM,EAAQf,iBAAiB,kCAElCQ,EAAmD7B,EAAU8B,GAVX,gDAatDG,EAAyB,EAAD,GAAQH,GAbsB,yDAAjC,sDW2BZkN,CAAcxP,MACxB,CAACsC,IAEJ,OAAKH,EAKD,qCACI,cAACmN,EAAA,EAAD,CAAM9K,WAAS,EAACkD,MAAO,CAAC+H,QAAS,QAAjC,SACI,cAACtC,GAAD,CAAsBvG,SAAUrG,EAAaU,SAAS,MAE1D,cAACqO,EAAA,EAAD,CAAM9K,WAAS,EAACoB,QAAS,EAAG8B,MAAO,CAACsG,UAAW,OAAO7C,eAAe,UAArE,SACI,cAAC,GAAD,CAAmB9K,UAAWA,EAAWe,MAAOA,MAEpD,cAAC,GAAD,OAXG,cAAC,KAAD,CAAUsO,GAAI,Y,UCpEvB/M,GAA8B,CAChC1C,GAAI,EACJ0P,MAAO,GACPnQ,MAAO,GACPC,SAAU,GACVC,YAAY,EACZC,SAAS,EACTwC,QAAQ,GAENS,GAAO,2BACNX,GACAP,G,UCMDsE,GAA4D3C,IAAMC,MAAK,SAAAC,GACzE,IAAMc,EAAUC,KACTsL,EAAmBrM,EAAnBqM,QAAShI,EAAUrE,EAAVqE,OAEVpB,EAASC,aAAU,CACrBC,cAAe,CACXlH,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBiH,iBAAkBP,OAAaC,MAAM,CACjC7G,MAAO4G,OAAa5G,MAAM,iBAAiBqQ,SAAS,YACpDpQ,SAAU2G,OAAa0J,IAAI,EAAE,gCAAgCD,SAAS,cAE1EjJ,SAAU,SAAAC,GACNtD,EAAMqD,SAASC,MAIvB,OACI,sBAAMD,SAAUJ,EAAOQ,aAAvB,SACI,eAACwC,EAAA,EAAD,CAAOC,UAAW,EAAGlF,UAAWF,EAAQ0L,MAAxC,UACI,uCACA,cAACrL,GAAA,EAAD,aAAWC,MAAO,SACH6B,EAAOqB,cAAc,WACnC+H,EAAQpQ,OAASoI,EAAOpI,OAAS,8BAAMoI,EAAOpI,QAC/C,cAACkF,GAAA,EAAD,aAAWC,MAAO,WACPrE,KAAM,YACFkG,EAAOqB,cAAc,cACnCrB,EAAOoB,OAAOnI,SAAW,8BAAM+G,EAAOoB,OAAOnI,WAAkB,KAChE,cAACuQ,GAAA,EAAD,CAAkBC,QAAS,cAAChD,EAAA,EAAD,aAAUnJ,MAAO,UACP+H,QAASrF,EAAOK,OAAOnH,YACnB8G,EAAOqB,cAAc,gBAC5ClD,MAAO,gBACzB,cAAChB,EAAA,EAAD,CAAQrD,KAAK,SAASsD,QAAS,WAAYE,MAAO,UAAlD,4BAQHoM,GAAqBnI,aAAoC,CAClEC,iBAAkB,SAAAzE,GACd,MAAO,CACH/D,MAAO+D,EAAM4M,cAAgB,GAC7B1Q,SAAU8D,EAAM6M,iBAAmB,GACnC1Q,WAAY6D,EAAM8M,oBAAqB,EACvCzJ,SAAUrD,EAAMqD,WAGxBI,aAAc,SAACH,EAAOoB,GAClBA,EAAK1E,MAAMqD,SAASC,KAVMkB,CAY/B/B,IAEG1B,GAAYe,aAAW,kBACzBE,aAAa,CACTwK,MAAO,CACH5B,SAAU,QACVmC,UAAW,QACX9K,QAAS,OACT+K,cAAe,SACfC,WAAY,SACZrF,eAAgB,qBC7EfsF,GAAYpN,IAAMC,MAAK,WAE5B,IAAMhB,EAAWuG,cACX1G,EAASqM,aAAuC,SAAAC,GAAK,OAAIA,EAAMtM,OAAOA,UACtEkC,EAAUC,KAEVoM,EAASpI,uBAAY,SAACqI,GF4Bf,IAACnR,EAAeC,EAAkBC,EAAsBC,OE3BrCgN,IAAxBgE,EAASjR,aAA0BiR,EAASjR,YAAa,QACpCiN,IAArBgE,EAAShR,UAAuBgR,EAAShR,SAAU,GACvD2C,GFyBU9C,EEzBKmR,EAASnR,MFyBCC,EEzBMkR,EAASlR,SFyBGC,EEzBOiR,EAASjR,WFyBMC,EEzBMgR,EAAShR,QFyBvE,uCAA4F,WAAM2C,GAAN,eAAAa,EAAA,6DAC7Gb,EAASM,GAAQjB,aAAa,SAD+E,kBAGpFxC,EAAgBK,EAAOC,EAAUC,EAAYC,GAHuC,OAI/E,KADpBiR,EAHmG,QAI9F5N,YAEPV,EAnBU,uCAAoB,WAAMA,GAAN,eAAAa,EAAA,6DACtCb,EAASM,GAAQjB,aAAa,SADQ,kBAGbxC,IAHa,OAG5ByR,EAH4B,OAIlCtO,EAASM,GAAQV,UAAU0O,EAAOrR,MAAK,IACvC+C,EAASM,GAAQjB,aAAa,SALI,sDAOlCW,EAASM,GAAQjB,aAAa,WAC9BW,EAASM,GAAQf,iBAAiB,KAAEC,UAC9B,IAAIwK,MAAM,KAAExK,SATgB,yDAApB,uDAoBVQ,EAASM,GAAQjB,aAAa,UAE9BW,EAASuO,aAAW,QAAQ,CAACC,OAAOF,EAAOrO,SAAS,MATiD,sDAYzGD,EAASM,GAAQjB,aAAa,WAC9BW,EAASM,GAAQf,iBAAiB,KAAEC,UAC9B,IAAIwK,MAAM,KAAExK,SAduF,yDAA5F,0DExBV,CAACQ,IAEJ,OAAIH,EACO,cAAC,KAAD,CAAUuN,GAAI,eAIrB,mCACI,cAACJ,EAAA,EAAD,CAAM9K,WAAS,EAACoB,QAAS,EAAGrB,UAAWF,EAAQsL,MAA/C,SACI,cAACO,GAAD,CAAoBtJ,SAAU8J,WAO5CpM,GAAYe,aAAW,kBACzBE,aAAa,CACToK,MAAO,CACHnK,QAAS,OACT+K,cAAe,SACfQ,aAAc,SACd/C,UAAW,a,wCC3BjBgD,GAA+B,SAAAzN,GACjC,OACI,cAAC0N,GAAA,EAAD,CAAQtJ,SAAS,SAAjB,SACI,eAACuJ,GAAA,EAAD,CAASxJ,MAAO,CAACyD,eAAgB,iBAAjC,UACI,cAACvB,EAAA,EAAD,CAAYuH,KAAK,QAAQrN,MAAM,UAAUsN,aAAW,OAApD,SACI,cAACC,GAAA,EAAD,MAEJ,cAACC,GAAA,EAAD,CAAY1N,QAAQ,KAApB,sBAIIL,EAAMpB,OACA,mCACE,cAACwB,EAAA,EAAD,CAAQE,QAASN,EAAMgO,OAAQzN,MAAO,UAAtC,uBAEF,cAACH,EAAA,EAAD,CAAQG,MAAM,UAAd,yBAOb0N,GAAkB,WAC3B,IAAM5P,EAAS4M,aAA0C,SAAAC,GAAK,OAAIA,EAAMF,UAAU3M,UAC5EO,EAASqM,aAAuC,SAAAC,GAAK,OAAIA,EAAMtM,OAAOA,UACtEsP,EAAYjD,aAAsC,SAAAC,GAAK,OAAIA,EAAMtM,OAAOwN,SACxErN,EAAWuG,cAMjB,OAAO,cAAC,GAAD,CAAQjH,OAAQA,EAAQO,OAAQA,EAAQsP,UAAWA,EAAWF,OAJtD,WACXjP,EHkBc,uCAAoB,WAAMA,GAAN,SAAAa,EAAA,6DACtCb,EAASM,GAAQjB,aAAa,SADQ,kBAGbxC,IAHa,OAIZ,IAJY,OAI3B6D,YACPV,EAASM,GAAQR,UACjBE,EAASM,GAAQjB,aAAa,SANI,sDAQlCW,EAASM,GAAQjB,aAAa,WAC9BW,EAASM,GAAQf,iBAAiB,KAAEC,UAC9B,IAAIwK,MAAM,KAAExK,SAVgB,yDAApB,2D,8BIjDhBa,GAA8B,CAChCb,QAAS,GACTF,OAAQ,OACRI,eAAc,GAEZY,GAAO,2BACNlB,GACAO,GCPA,SAASyP,KACZ,IAAMnD,EAAYC,aAA0C,SAAAC,GAAK,OAAIA,EAAMF,UAAU3M,UAC/EI,EAAgBwM,aAAuC,SAAAC,GAAK,OAAIA,EAAMF,UAAUvM,iBAChFM,EAAWuG,cACXxE,EAAUC,KAMhB,OAJAwE,qBAAU,WACNxG,EDiBqB,uCAAmB,WAAMA,GAAN,eAAAa,EAAA,+EAEvBhE,IAFuB,OAGlB,KADhBwS,EAFkC,QAGjC3O,YACHV,EAASM,GAAQV,UAAUyP,EAAGpS,MAAK,IAEvC+C,EAASM,GAAQb,mBAAkB,IANK,gDAQxCU,EAAyB,EAAD,GAAQH,GARQ,yDAAnB,yDChBvB,CAACA,IAEEN,EAOD,cAAC,KAAD,UACI,qCACI,cAAC,GAAD,IACe,SAAduM,GAAwB,cAACqD,GAAA,EAAD,CAAgBrN,UAAWF,EAAQwN,OAC5D,eAACC,GAAA,EAAD,CAAWC,OAAK,EAACxN,UAAWF,EAAQ4F,QAApC,UACI,cAAC,KAAD,CAAO+H,KAAM,aAAcC,UAAW1C,KACtC,cAAC,KAAD,CAAOyC,KAAM,SAAUC,UAAWxB,QAEtC,cAAC,GAAD,SAdD,qBAAKlM,UAAWF,EAAQ6N,SAAxB,SACH,cAACC,GAAA,EAAD,MAmBZ,IAAM7N,GAAYe,aAAW,kBACzBE,aAAa,CACTsM,KAAM,CACFlK,SAAU,WACV7B,MAAO,QAEXoM,SAAS,CACLvK,SAAU,WACV7B,MAAO,OACP8E,OAAO,OACPpF,QAAQ,OACR2F,eAAe,SACfqF,WAAW,UAEf4B,KAAK,CACDtM,MAAO,OACP8E,OAAQ,QAEZX,QAAQ,CACJvB,SAAU,Y,6BC9ChB2J,IAPO,mDACNlS,GACAe,GACAQ,GACAO,GAGaqQ,aAAgB,CAChCjS,UlBN4B,WAA4G,IAA3GoO,EAA0G,uDAA5E9L,EAAc4P,EAA8D,uCACvI,OAAQA,EAAOjS,MACX,IAAK,iBACD,OAAOiS,EAAOlS,UAAUkH,KAAI,SAAA8E,GAAE,kCAASA,GAAT,IAAavL,OAAQ,MAAO0R,QAAQ,OACtE,IAAK,eACD,MAAM,GAAN,mBAAW/D,GAAX,4BAAsB8D,EAAO/R,UAA7B,IAAuCM,OAAQ,UACnD,IAAK,wBACD,OAAO2N,EAAMlH,KAAI,SAAA8E,GAAE,OAAIA,EAAGpM,KAAOsS,EAAO3R,WAAjB,2BAAkCyL,GAAlC,IAAsCrM,MAAOuS,EAAOvS,QAASqM,KACxF,IAAK,yBACD,OAAOoC,EAAMlH,KAAI,SAAA8E,GAAE,OAAIA,EAAGpM,KAAOsS,EAAO3R,WAAjB,2BAAkCyL,GAAlC,IAAsCvL,OAAQyR,EAAOzR,SAAUuL,KAC1F,IAAK,kBACD,OAAOoC,EAAM3N,QAAO,SAAAuL,GAAE,OAAIA,EAAGpM,KAAOsS,EAAO7R,cAE/C,IAAK,aACD,OAAO+N,EAAMlH,KAAI,SAAA8E,GAAE,OAAIA,EAAGpM,KAAOsS,EAAO7R,WAAjB,2BAAkC2L,GAAlC,IAAsCpL,QAASsR,EAAOtR,UAAWoL,KAC5F,QACI,OAAOoC,IkBTfrN,MhBAuB,WAA8F,IAA7FqN,EAA4F,uDAArE9L,EAAc4P,EAAuD,uCACpH,OAAQA,EAAOjS,MACX,IAAK,WACD,OAAO,2BAAImO,GAAX,kBAAmB8D,EAAO7R,WAA1B,YAA2C6R,EAAOnR,SACtD,IAAK,cACD,OAAO,2BAAIqN,GAAX,kBAAmB8D,EAAO7R,WAAa+N,EAAM8D,EAAO7R,YAAYI,QAAO,SAAAgM,GAAE,OAAIA,EAAG7M,KAAOsS,EAAO/Q,YAClG,IAAK,WACD,OAAO,2BAAIiN,GAAX,kBAAmB8D,EAAOjR,KAAKZ,WAA/B,CAA6C6R,EAAOjR,MAApD,mBAA6DmN,EAAM8D,EAAOjR,KAAKZ,gBACnF,IAAK,yBACD,OAAO,2BAAI+N,GAAX,kBAAmB8D,EAAO7R,WAAa,KAC3C,IAAK,kBACD,IAAM+R,EAAMF,EAAO7R,WACbgS,EAAS,eAAOjE,GAEtB,cADOiE,EAAUD,GACVC,EACX,IAAK,cACD,OAAO,2BACAjE,GADP,kBAEK8D,EAAO7R,WAAa+N,EAAM8D,EAAO7R,YAAY6G,KAAI,SAAAsF,GAAC,OAAIA,EAAE5M,KAAOsS,EAAO/Q,OAAS+Q,EAAOjR,KAAOuL,OAEtG,QACI,OAAO4B,IgBpBfF,UFG4B,WAA8F,IAA7FE,EAA4F,uDAArE9L,GAAc4P,EAAuD,uCACzH,OAAQA,EAAOjS,MACX,IAAK,iBACD,OAAO,2BAAImO,GAAX,IAAkB7M,OAAQ2Q,EAAO3Q,SACrC,IAAK,qBACD,OAAO,2BAAI6M,GAAX,IAAkB3M,QAASyQ,EAAOzQ,UACtC,IAAK,sBACD,OAAO,2BAAI2M,GAAX,IAAkBzM,cAAeuQ,EAAOvQ,gBAC5C,QACI,OAAOyM,IEXftM,ONDyB,WAA8F,IAA7FsM,EAA4F,uDAArE9L,GAAc4P,EAAuD,uCACtH,OAAQA,EAAOjS,MACX,IAAK,cACD,OAAO,uCAAImO,GAAU8D,EAAOhT,MAA5B,IAAiC4C,OAAOoQ,EAAOpQ,SACnD,IAAK,UACD,MAAO,CAAClC,GAAG,EAAE0P,MAAM,GAAGnQ,MAAM,GAAGC,SAAS,GAAGC,YAAW,EAAMC,SAAQ,EAAMwC,QAAO,GACrF,QACI,OAAOsM,IMLfxG,KAAK0K,QAGIC,GAAQC,aAAYR,GAAaS,aAAgBC,O,SChB9DC,IAASC,OACL,cAAC,KAAD,UACI,cAAC,IAAD,CAAUL,MAAOA,GAAjB,SACI,cAAC,GAAD,QAGNM,SAASC,eAAe,SzB4HxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjU,MAAK,SAAAkU,GACJA,EAAaC,gBAEdC,OAAM,SAAA/Q,GACLgR,QAAQhR,MAAMA,EAAMZ,c","file":"static/js/main.b0a3e9c4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","type PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\nexport type ActionsType<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesType<T>>\n\n// todolist type\n\nexport type TodoListDomainType = TodolistType & {\n    filter: FilterValuesType\n    disable: boolean\n}\nexport type TodolistType = {\n    id: string\n    addedDate: string\n    order: number\n    title: string\n}\nexport type FilterValuesType = 'all' | 'active' | 'completed';\n\nexport type TodolistPropsType = {\n    todoList:TodoListDomainType\n    tasks: TaskType[]\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\n    addTask: (title: string, todoListID: string) => void\n    removeTodoList: (todoListID: string) => void\n    changeTodoListTitle: (todoListID: string, title: string) => void\n};\n\nexport type TodoListContainerType = {\n    todoLists: TodoListDomainType[]\n    tasks: TaskStateType\n}\n\n\n///task type\nexport type TaskType = {\n    id: string\n    todoListId: string\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    order: number\n    startDate: string\n    addedDate: string\n    deadline: string\n};\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3,\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4,\n}\n\nexport type TaskStateType = {\n    [key: string]: TaskType[]\n}\n\nexport type TaskTypeProps = {\n    task: TaskType\n    todoListId: string\n    disable:boolean\n    removeTask: (idTask: string, todoListID: string) => void\n    changeTask: (todolistId: string, idTask: string, task: UpdateModelPropertyTaskType) => void\n}\n\nexport type TaskContainerPropsType = {\n    tasks: TaskType[]\n    todoListId: string\n    filter: FilterValuesType\n    disable:boolean\n}\n\nexport type UpdateModelPropertyTaskType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    order?: number\n    startDate?: string\n    addedDate?: string\n    deadline?: string\n}\n\nexport type APIModelPropertyTaskType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    order: number\n    startDate: string\n    addedDate: string\n    deadline: string\n}\n\n//addItemForm\nexport type AddItemFormType = {\n    addItem: (title: string) => void\n    disable:boolean\n}\n\n//editableSpan\nexport type EditableSpanType = {\n    titleSpan: string\n    changeTitle: (newTitle: string) => void\n    type: 'title' | 'priority'\n    disable?:boolean\n};\n\n//isAuth types\nexport type AuthMeType = {\n    id: number\n    login: string\n    email: string\n}\n\nexport type MeProfileType = AuthMeType & {\n    password: string\n    rememberMe?: boolean\n    captcha?: boolean\n    isAuth:boolean\n}\n\nexport type FormDataLoginType = {\n    email: string,\n    password: string,\n    rememberMe: boolean\n    captcha?: boolean\n}","import axios from 'axios'\nimport {ResponseTypeGeneric} from \"../redux/types/TypesResponse\";\nimport {AuthMeType} from \"../redux/types/Types\";\n\n\nexport const axiosInstance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': '23cf7b54-6cd9-4cb1-a851-3767976432ef'\n    },\n})\n\nexport const APIAuthMe = {\n    me(){\n        return axiosInstance.get<ResponseTypeGeneric<AuthMeType>>(\"auth/me\")\n            .then(response => response.data);\n    },\n    login(email:string,password:string,rememberMe?:boolean,captcha?:boolean){\n        return axiosInstance.post<ResponseTypeGeneric<{userId:number}>>(\"auth/login\",{email,password,rememberMe,captcha})\n            .then(response => response.data)\n    },\n    logOut(){\n        return axiosInstance.delete<ResponseTypeGeneric>(\"auth/login\")\n            .then(response => response.data)\n    }\n}\n","import {TodoListDomainType} from '../redux/types/Types';\nimport {ResponseTypeGeneric} from '../redux/types/TypesResponse';\nimport { axiosInstance } from './APIAuthMe';\n\nexport const APITodoLists = {\n    get() {\n        return axiosInstance.get<TodoListDomainType[]>(\"todo-lists\")\n            .then(res => res.data)\n    },\n    create(title:string) {\n        return axiosInstance.post<ResponseTypeGeneric<{item:TodoListDomainType}>>(\"todo-lists\", {title})\n            .then(response => response.data)\n    },\n    updateTitle(title: string, id: string) {\n        return axiosInstance.put<ResponseTypeGeneric>(`todo-lists/${id}`, {title})\n            .then(response => response.data)\n    },\n    delete(id: string) {\n        return axiosInstance.delete<ResponseTypeGeneric>(`todo-lists/${id}`)\n            .then(response => response.data)\n    },\n}\n\n","import {AuthMeType, FilterValuesType, TaskType, TodoListDomainType} from '../types/Types';\nimport {StatusType} from \"../reducers/StatusAppReducer\";\n\nexport const actionsTodoList = {\n    getTodoLists: (todoLists: TodoListDomainType[]) => ({type: 'GET-TODO-LISTS', todoLists} as const),\n    addTodoList: (todoList: TodoListDomainType) => ({type: 'ADD-TODOLIST', todoList} as const),\n    removeTodoList: (todoListId: string) => ({type: 'REMOVE-TODOLIST', todoListId} as const),\n    changeTodoListTitle: (todoListID: string, title: string) => ({\n        type: 'CHANGE-TODOLIST-TITLE',\n        todoListID,\n        title\n    } as const),\n    changeTodoListFilter: (todoListID: string, filter: FilterValuesType) => ({\n        type: 'CHANGE-TODOLIST-FILTER',\n        todoListID,\n        filter\n    } as const),\n    addTasksTodoList: (todoListId: string) => ({type: 'ADD-TASKS-FOR-TODOLIST', todoListId} as const),\n    isDisable:(disable:boolean, todoListId:string) => ({type:\"IS-DISABLE\",disable,todoListId} as const),\n}\n\nexport const actionsTask= {\n    getTask: (todoListId: string, tasks: TaskType[]) => ({type: 'GET-TASK', todoListId, tasks} as const),\n    addTask: (task: TaskType) => ({type: 'ADD-TASK', task,} as const),\n    removeTask: (idTask: string, todoListId: string) => ({type: 'REMOVE-TASK', todoListId, idTask} as const),\n    changeTask: (todoListId: string, idTask: string, task: TaskType) => ({\n        type: 'CHANGE-TASK',\n        todoListId,\n        idTask,\n        task\n    } as const),\n}\n\nexport const actionsStatusApp = {\n    setStatusApp: (status:StatusType) => ({type:\"SET-APP-STATUS\",status} as const),\n    setMessageStatus:(message?:string) => ({type:\"SET-MESSAGE-STATUS\",message} as const),\n    setAppInitialized:(isInitialized:boolean) => ({type:\"SET-APP-INITIALIZED\",isInitialized} as const),\n}\n\nexport const actionsIsAuth = {\n    setMeData: (data:AuthMeType,isAuth:boolean) => ({type: \"SET-ME-DATA\",data,isAuth} as const),\n    logOut:() => ({type:\"LOG-OUT\"} as const),\n};","import {ResponseTypeGeneric} from \"../redux/types/TypesResponse\";\nimport {Dispatch} from \"redux\";\nimport {ActionsType} from \"../redux/types/Types\";\nimport {actionsStatusApp} from \"../redux/actions/Actions\";\n\ntype ErrorUtilsDispatchType = Dispatch<ActionsType<typeof actionsStatusApp>>\n\nexport const handleServerAppError = <T>(data: ResponseTypeGeneric<T>, dispatch: ErrorUtilsDispatchType) => {\n\n    if (data.messages.length) {\n        dispatch(actionsStatusApp.setMessageStatus(data.messages[0]));\n    } else {\n        dispatch(actionsStatusApp.setMessageStatus(\"Some error occurred.\"));\n    }\n    dispatch(actionsStatusApp.setStatusApp(\"failed\"));\n}\n\nexport const handleServerNetworkError = (error: { message: string }, dispatch: ErrorUtilsDispatchType) => {\n    dispatch(actionsStatusApp.setMessageStatus(error.message))\n    dispatch(actionsStatusApp.setStatusApp('failed'))\n}","import {APITodoLists} from '../../DAL/APITodoLists';\nimport {ActionsType, TodoListDomainType} from '../types/Types';\nimport {AppThunkType} from '../store';\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/errorUtils\";\nimport {actionsStatusApp, actionsTodoList} from \"../actions/Actions\";\n\nconst initialState: TodoListDomainType[] = [];\nconst actions = {\n    ...actionsTodoList,\n    ...actionsStatusApp,\n}\n\nexport const TodoListReducers = (state: TodoListDomainType[] = initialState, action: ActionsType<typeof actions>): TodoListDomainType[] => {\n    switch (action.type) {\n        case 'GET-TODO-LISTS':\n            return action.todoLists.map(tl => ({...tl, filter: \"all\", isLoad: false}));\n        case 'ADD-TODOLIST':\n            return [...state, {...action.todoList, filter: \"all\"}];\n        case 'CHANGE-TODOLIST-TITLE':\n            return state.map(tl => tl.id === action.todoListID ? {...tl, title: action.title} : tl);\n        case 'CHANGE-TODOLIST-FILTER':\n            return state.map(tl => tl.id === action.todoListID ? {...tl, filter: action.filter} : tl);\n        case 'REMOVE-TODOLIST': {\n            return state.filter(tl => tl.id !== action.todoListId);\n        }\n        case \"IS-DISABLE\":\n            return state.map(tl => tl.id === action.todoListId ? {...tl, disable: action.disable} : tl);\n        default:\n            return state\n    }\n}\n\nexport const getTodoListsTC = (): AppThunkType => async dispatch => {\n    dispatch(actions.setStatusApp(\"load\"));\n    try {\n        const todoLists = await APITodoLists.get();\n        dispatch(actions.getTodoLists(todoLists));\n        dispatch(actions.setStatusApp(\"idle\"));\n    } catch (error) {\n        handleServerNetworkError(error, dispatch);\n    }\n}\n\nexport const addTodolistTC = (title: string): AppThunkType => async dispatch => {\n    dispatch(actions.setStatusApp(\"load\"));\n    try {\n        const todoList = await APITodoLists.create(title);\n        if (todoList.resultCode === 0) {\n            dispatch(actions.addTodoList(todoList.data.item))\n            dispatch(actions.addTasksTodoList(todoList.data.item.id))\n            dispatch(actions.setStatusApp(\"succeeded\"));\n            dispatch(actions.setMessageStatus(\"Todo list created succeeded.\"));\n        } else {\n            handleServerAppError<{ item: TodoListDomainType }>(todoList, dispatch);\n        }\n    } catch (error) {\n        handleServerNetworkError(error, dispatch);\n    }\n}\n\nexport const deleteTodoListTC = (id: string): AppThunkType => async dispatch => {\n    dispatch(actions.setStatusApp(\"load\"));\n    dispatch(actions.isDisable(true, id));\n    try {\n        const data = await APITodoLists.delete(id)\n        if (data.resultCode === 0) {\n            dispatch(actions.removeTodoList(id));\n            dispatch(actions.removeTodoList(id));\n            dispatch(actions.setStatusApp(\"succeeded\"));\n            dispatch(actions.setMessageStatus(\"Todo list remove succeeded.\"));\n            dispatch(actions.isDisable(false, id));\n        }else{\n            handleServerAppError(data, dispatch);\n        }\n    } catch (error) {\n        handleServerNetworkError(error, dispatch);\n        dispatch(actions.isDisable(false, id));\n    }\n}\n\nexport const updateTitleTodoListTC = (id: string, title: string): AppThunkType => async dispatch => {\n    dispatch(actions.setStatusApp(\"load\"));\n    dispatch(actions.isDisable(true, id));\n    try {\n        const data = await APITodoLists.updateTitle(title, id)\n        if (data.resultCode === 0) {\n            dispatch(actions.changeTodoListTitle(id, title));\n            dispatch(actions.setStatusApp(\"succeeded\"));\n            dispatch(actions.setMessageStatus(\"Todo list change succeeded.\"));\n            dispatch(actions.isDisable(false, id));\n        }else{\n            handleServerAppError(data, dispatch);\n        }\n    } catch (error) {\n        handleServerNetworkError(error, dispatch);\n        dispatch(actions.isDisable(false, id));\n    }\n}","import {APIModelPropertyTaskType, TaskType} from '../redux/types/Types';\nimport {ResponseTypeGeneric, ResponseTypeGet} from '../redux/types/TypesResponse';\nimport {axiosInstance} from \"./APIAuthMe\";\n\nexport const APITasks = {\n    get(id: string) {\n        return axiosInstance.get<ResponseTypeGet<TaskType[]>>(`/todo-lists/${id}/tasks`)\n            .then(response => response.data.items)\n    },\n    create(id: string, title: string) {\n        return axiosInstance.post<ResponseTypeGeneric<{ item: TaskType }>>(`/todo-lists/${id}/tasks`, {title})\n            .then(response => response.data)\n    },\n    updateTitle(todoListId: string, idTask: string, property: APIModelPropertyTaskType) {\n        return axiosInstance.put<ResponseTypeGeneric<{ item: TaskType }>>(`/todo-lists/${todoListId}/tasks/${idTask}`, {...property})\n            .then(response => response.data)\n    },\n    delete(todoListId: string, idTask: string) {\n        return axiosInstance.delete<ResponseTypeGeneric>(`/todo-lists/${todoListId}/tasks/${idTask}`)\n            .then(response => response.data.resultCode)\n    }\n}\n","import {APITasks} from '../../DAL/APITasks';\nimport {\n    ActionsType,\n    APIModelPropertyTaskType,\n    TaskStateType,\n    TaskType,\n    UpdateModelPropertyTaskType\n} from '../types/Types';\nimport {AppRootStateType, AppThunkType} from '../store';\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/errorUtils\";\nimport {actionsStatusApp, actionsTask, actionsTodoList} from \"../actions/Actions\";\n\nconst initialState: TaskStateType = {}\nconst actions = {\n    ...actionsTask,\n    ...actionsStatusApp,\n    ...actionsTodoList,\n}\n\nexport const TaskReducer = (state: TaskStateType = initialState, action: ActionsType<typeof actions>): TaskStateType => {\n    switch (action.type) {\n        case 'GET-TASK':\n            return {...state, [action.todoListId]: [...action.tasks]}\n        case 'REMOVE-TASK':\n            return {...state, [action.todoListId]: state[action.todoListId].filter(el => el.id !== action.idTask)}\n        case 'ADD-TASK':\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\n        case 'ADD-TASKS-FOR-TODOLIST':\n            return {...state, [action.todoListId]: []}\n        case 'REMOVE-TODOLIST':\n            const key = action.todoListId;\n            const copyState = {...state};\n            delete copyState[key];\n            return copyState;\n        case 'CHANGE-TASK':\n            return {\n                ...state,\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.idTask ? action.task : t)\n            }\n        default:\n            return state\n    }\n}\n\nexport const getTasks = (idTodolist: string): AppThunkType => async dispatch => {\n    dispatch(actions.setStatusApp(\"load\"));\n    try {\n        const tasks = await APITasks.get(idTodolist);\n        dispatch(actions.getTask(idTodolist, tasks));\n        dispatch(actions.setStatusApp(\"idle\"));\n    } catch (error) {\n        handleServerNetworkError(error, dispatch);\n    }\n}\n\nexport const createTaskTC = (idTodolist: string, title: string): AppThunkType => async dispatch => {\n    dispatch(actions.setStatusApp(\"load\"));\n    dispatch(actions.isDisable(true,idTodolist));\n    try {\n        const data = await APITasks.create(idTodolist, title);\n        if (data.resultCode === 0) {\n            dispatch(actions.addTask(data.data.item));\n            dispatch(actions.setStatusApp(\"succeeded\"));\n            dispatch(actions.setMessageStatus(\"Task created succeeded.\"));\n            dispatch(actions.isDisable(false,idTodolist));\n        }else{\n            handleServerAppError<{item:TaskType}>(data, dispatch);\n            dispatch(actions.isDisable(false,idTodolist));\n        }\n    } catch (error) {\n        handleServerNetworkError(error, dispatch);\n        dispatch(actions.isDisable(false,idTodolist));\n    }\n}\n\nexport const updateTask = (todoListId: string, idTask: string, model: UpdateModelPropertyTaskType): AppThunkType =>\n    async (dispatch, getState: () => AppRootStateType) => {\n        dispatch(actions.setStatusApp(\"load\"));\n        dispatch(actions.isDisable(true,todoListId));\n        const task = getState().tasks[todoListId].find(tl => tl.id === idTask);\n        if (!task) {\n            throw new Error(\"task not found in the state\");\n        }\n        const modelAPI: APIModelPropertyTaskType = {\n            title: task.title,\n            order: task.order,\n            description: task.description,\n            priority: task.priority,\n            status: task.status,\n            addedDate: task.addedDate,\n            startDate: task.startDate,\n            deadline: task.deadline,\n            ...model\n        }\n        try {\n            const data = await APITasks.updateTitle(todoListId, idTask, modelAPI)\n            if (data.resultCode === 0) {\n                dispatch(actions.changeTask(todoListId, idTask, data.data.item));\n                dispatch(actions.setStatusApp(\"succeeded\"));\n                dispatch(actions.setMessageStatus(\"Task change succeeded.\"));\n                dispatch(actions.isDisable(false,todoListId));\n            }else{\n                handleServerAppError<{item:TaskType}>(data, dispatch);\n            }\n        } catch (error) {\n            handleServerNetworkError(error, dispatch);\n            dispatch(actions.isDisable(false,todoListId));\n        }\n\n    }\n\nexport const deleteTask = (todoListId: string, idTask: string): AppThunkType => async dispatch => {\n    dispatch(actions.setStatusApp(\"load\"));\n    dispatch(actions.isDisable(true,todoListId))\n    try {\n        const resultCode = await APITasks.delete(todoListId, idTask)\n        if (resultCode === 0) {\n            dispatch(actions.removeTask(idTask, todoListId));\n            dispatch(actions.setStatusApp(\"succeeded\"));\n            dispatch(actions.setMessageStatus(\"Task remove succeeded.\"));\n            dispatch(actions.isDisable(false,todoListId))\n        }\n    } catch (error) {\n        handleServerNetworkError(error, dispatch);\n        dispatch(actions.isDisable(false,todoListId));\n    }\n}\n","import React from \"react\";\nimport {Button} from \"@material-ui/core\";\nimport {FilterValuesType} from '../../redux/types/Types';\n\ntype ButtonFilterType = {\n    titleP:string\n    filterP: FilterValuesType\n    onClickHandlerP: () => void\n}\n\nexport const ButtonFilter = React.memo( (props:ButtonFilterType) => {\n    const {titleP,filterP,onClickHandlerP} = props;\n    return(\n        <div>\n            <Button variant={filterP === titleP ? \"contained\" : \"outlined\"}\n                    onClick={onClickHandlerP}\n                    color={\"primary\"}>{titleP}</Button>\n        </div>\n    )\n})\n","import React, {ChangeEvent, useState} from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\ntype PropsType = {\n    nameDate:string\n    date: string\n    saveDate:(date:string) => void\n}\n\nexport const DatesTask = (props:PropsType) => {\n    const {date,nameDate} = props\n    const [dateValue,setDateValue] = useState<string>(date);\n\n    const changeDate = (e:ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        setDateValue(e.currentTarget.value);\n        props.saveDate(dateValue);\n    }\n\n    const classes = useStyles();\n\n    return (\n        <form className={classes.container} noValidate>\n            <TextField\n                id=\"datetime-local\"\n                label={nameDate}\n                type=\"datetime-local\"\n                defaultValue={dateValue}\n                onChange={changeDate}\n                className={classes.textFieldTitle}\n                InputLabelProps={{\n                    shrink: true,\n                }}\n            />\n        </form>\n    )\n}\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        container: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            margin:'10px 0 0 0'\n        },\n        textFieldTitle: {\n            marginLeft: theme.spacing(1),\n            marginRight: theme.spacing(1),\n            width: 210,\n        },\n    }),\n);","import React, {useCallback, useState} from 'react';\nimport {makeStyles, MenuItem, TextField, Tooltip} from \"@material-ui/core\";\nimport {FormikProps, useFormik, withFormik} from \"formik\";\nimport * as Yup from \"yup\";\nimport {createStyles, Theme} from \"@material-ui/core/styles\";\n\ninterface ValuesType {\n    title: string\n    onSubmit: (newTitle: string) => void\n    type: 'title' | 'priority'\n    disable?: boolean\n}\ninterface FormProps {\n    title: string\n    changeTitle: (newTitle: string) => void\n    type: 'title' | 'priority'\n    disable?: boolean\n}\n\nconst priorities = [\n    {\n        value: '1',\n        label: '1',\n    },\n    {\n        value: '2',\n        label: '2',\n    },\n    {\n        value: '3',\n        label: '3',\n    },\n    {\n        value: '4',\n        label: '4',\n    },\n];\n\nconst Form: React.FC<FormProps & FormikProps<ValuesType>> = React.memo(props => {\n\n    const [priority, setPriority] = useState('4');\n\n    const classes = useStyles();\n    const schema = Yup.object().shape({\n        title: Yup.string().max(100, \"Too long\").trim()\n    })\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setPriority(event.target.value);\n    };\n\n    const formik = useFormik({\n        initialValues: {\n            title: props.title,\n            type: props.type,\n            disable: props.disable\n        },\n        validationSchema: schema,\n        onSubmit: (values, {resetForm}) => {\n            props.changeTitle(values.title);\n            resetForm({})\n        }\n    })\n\n    if (props.type === \"priority\") {\n        return (\n            <form onSubmit={formik.handleSubmit}>\n                <TextField\n                    id=\"standard-select-currency\"\n                    select\n                    label=\"Select\"\n                    value={priority}\n                    onChange={handleChange}\n                    helperText=\"Please select your priority\"\n                    disabled={formik.values.disable} autoFocus\n                >\n                    {priorities.map((option) => (\n                        <MenuItem key={option.value} value={option.value}>\n                            {option.label}\n                        </MenuItem>\n                    ))}\n                </TextField>\n\n                <div style={({position: \"fixed\"})}>{formik.errors.title ? <div>{formik.errors.title}</div> : null}</div>\n            </form>\n        )\n    } else {\n        return (\n            <form onSubmit={formik.handleSubmit}>\n                <TextField {...formik.getFieldProps(\"title\")}\n                           className={classes.textFieldTitle}\n                           disabled={formik.values.disable} autoFocus/>\n                <div style={({position: \"fixed\"})}>{formik.errors.title ? <div>{formik.errors.title}</div> : null}</div>\n            </form>\n        )\n    }\n})\n\n\nconst EditableSpanForm = withFormik<FormProps, ValuesType>({\n    mapPropsToValues: props => {\n        return {\n            title: props.title,\n            disable: props.disable,\n            onSubmit: props.changeTitle,\n            type: props.type,\n        };\n    },\n    handleSubmit: (values, form) => {\n        form.props.changeTitle(values.title);\n    },\n})(Form);\n\n\nexport const EditableSpanFormik: React.FC<FormProps> = props => {\n    const [editMode, setEditMode] = useState<boolean>(false);\n\n    const saveTitle = useCallback((title: string) => {\n        props.changeTitle(title);\n        setEditMode(false);\n    }, [props])\n\n\n    const titleForSpan = (): string => {\n        if (props.title.length > 23) {\n            return props.title.substr(0, 23) + \"...\";\n        } else {\n            return props.title;\n        }\n    }\n\n    return (\n        <>\n            {\n                editMode\n                    ? <EditableSpanForm type={'title'} title={props.title}\n                                        changeTitle={saveTitle}\n                                        disable={props.disable}/>\n                    : <Tooltip title={props.title} placement={\"top\"}>\n                    <span onClick={() => {\n                        setEditMode(true)\n                    }}>{titleForSpan()}</span>\n                    </Tooltip>\n            }</>\n    )\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        textFieldTitle: {\n            maxWidth: '130px',\n        },\n        textFieldPriority: {\n            '& .MuiTextField-root': {\n                margin: theme.spacing(1),\n                width: '25ch',\n            }\n        },\n    })\n)","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport {Box, Button, IconButton, makeStyles, Paper, TextField} from '@material-ui/core';\nimport {getTasks} from '../../redux/reducers/TaskReducer';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport {DatesTask} from '../common/DatesTask';\nimport SaveIcon from '@material-ui/icons/Save';\nimport {useDispatch} from 'react-redux';\nimport {TaskPriorities, TaskType, UpdateModelPropertyTaskType} from '../../redux/types/Types';\nimport {EditableSpanFormik} from \"../FormComponents/EditableSpanFormik\";\nimport {withFormik} from \"formik\";\n\ninterface PageUpdateTaskType {\n    task: TaskType\n    changeTask: (property: UpdateModelPropertyTaskType) => void\n    showDetails: () => void\n}\n\nexport const PageUpdateTask: React.FC<PageUpdateTaskType> = React.memo(props => {\n\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(getTasks(props.task.todoListId));\n    }, [])\n\n    const [textDesc, setTextDesc] = useState<string>(props.task.description);\n    const [task, setTask] = useState<TaskType>({...props.task});\n    const date: string[] = [];\n    const classes = useStyles();\n\n    const onChangeText = (e: ChangeEvent<HTMLInputElement>) => setTextDesc(e.currentTarget.value);\n\n    const saveDate = (dateComp: string) => {\n        date.push(dateComp)\n    }\n\n    const savePriority = (newPriority: string) => {\n        const priority: TaskPriorities = Number(newPriority);\n        setTask({...task, priority});\n    }\n\n    const saveTask = () => {\n        const property: UpdateModelPropertyTaskType = {\n            priority: task.priority,\n            description: textDesc,\n            addedDate: date[0],\n            startDate: date[1],\n            deadline: date[2],\n        }\n        props.changeTask(property);\n        props.showDetails();\n    }\n\n    return (\n        <Box className={classes.root} zIndex={'tooltip'}>\n            <Paper elevation={20} className={classes.box}>\n                <form>\n                    <div className={classes.header}>\n                        <div>\n                            <IconButton onClick={() => props.showDetails()}>\n                                <ChevronLeftIcon/>\n                            </IconButton>\n                        </div>\n                        <div className={classes.font}>\n                            <span>{task.title}</span>\n                        </div>\n                        <div className={classes.font}>\n                            <EditableSpanFormik title={task.priority + ''} changeTitle={savePriority} type={'priority'}/>\n                        </div>\n                    </div>\n                    <div className={classes.content}>\n                        <div className={classes.dates}>\n                            <DatesTask date={task.addedDate} nameDate={'Added Start'} saveDate={saveDate}/>\n                            <DatesTask date={task.startDate} nameDate={'Start Date'} saveDate={saveDate}/>\n                            <DatesTask date={task.deadline} nameDate={'Dead line'} saveDate={saveDate}/>\n                        </div>\n                        <div className={classes.description}>\n                            <TextField variant={'outlined'}\n                                       value={textDesc}\n                                       label={'Description'}\n                                       onChange={onChangeText}\n                                       multiline\n                                       rows={8}\n                                       fullWidth\n                            />\n                        </div>\n                    </div>\n                    <div>\n                        <Button\n                            variant=\"outlined\"\n                            color=\"primary\"\n                            size=\"small\"\n                            className={classes.button}\n                            onClick={saveTask}\n                            startIcon={<SaveIcon/>}\n                        >\n                            Save\n                        </Button>\n                    </div>\n                </form>\n            </Paper>\n        </Box>\n    )\n})\n\n//\n// const EditableSpanForm = withFormik<FormProps, ValuesType>({\n//     mapPropsToValues: props => {\n//         return {\n//             title: props.title,\n//             disable: props.disable,\n//             onSubmit: props.changeTitle,\n//             type: props.type,\n//         };\n//     },\n//     handleSubmit: (values, form) => {\n//         form.props.changeTitle(values.title);\n//     },\n// })(Form);\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '47vw',\n            height: '42vh',\n        },\n        top: '200px',\n        left: '400px',\n        position: 'absolute',\n        backgroundColor: '#3f51b5',\n        borderRadius: '15px',\n    },\n    box: {\n        backgroundColor: '#ffffff'\n    },\n    font: {\n        fontSize: '24px',\n        fontWeight: 'bold',\n        marginRight: '35px'\n    },\n    header: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        margin: '10px 20px 10px 10px'\n    },\n    content: {\n        display: 'flex',\n        justifyContent: 'space-around'\n    },\n    dates: {},\n    description: {\n        width: '350px'\n    },\n    button: {\n        margin: theme.spacing(2.5),\n    },\n}));\n\n\n","import React, {ChangeEvent, useCallback, useState} from 'react';\nimport {Checkbox, CheckboxProps, IconButton, withStyles} from '@material-ui/core';\nimport {Delete} from '@material-ui/icons';\nimport {green} from '@material-ui/core/colors';\nimport {PageUpdateTask} from './PageUpdateTask';\nimport {\n    TaskContainerPropsType,\n    TaskStatuses,\n    TaskTypeProps,\n    UpdateModelPropertyTaskType\n} from '../../redux/types/Types';\nimport {deleteTask, updateTask} from '../../redux/reducers/TaskReducer';\nimport {useDispatch} from 'react-redux';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport {EditableSpanFormik} from \"../FormComponents/EditableSpanFormik\";\n\nexport const Task: React.FC<TaskTypeProps> = React.memo(props => {\n    const [showDetails, setShowDetails] = useState<boolean>(false);\n\n    const onClickRemoveTask = useCallback(() => {\n        props.removeTask(props.task.id, props.todoListId)\n    }, [props]);\n    const showDetailsTask = useCallback(() => {\n        setShowDetails(!showDetails);\n    }, [showDetails]);\n\n    const onChangeTask = useCallback((model: UpdateModelPropertyTaskType) => {\n        props.changeTask(props.todoListId, props.task.id, model);\n    }, [props]);\n    const changeTaskTitle = useCallback((title: string) => {\n        onChangeTask({title});\n    }, [onChangeTask]);\n    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\n        e.currentTarget.checked\n            ? onChangeTask({status: TaskStatuses.InProgress})\n            : onChangeTask({status: TaskStatuses.New})\n    }\n\n    const taskJSX = (\n        <>\n            <div className={'task'} key={props.task.id}>\n                <GreenCheckbox checked={props.task.status === TaskStatuses.InProgress}\n                               onChange={changeTaskStatus} disabled={props.disable}/>\n                <EditableSpanFormik type={'title'}\n                                    title={props.task.title}\n                                    changeTitle={changeTaskTitle}\n                                    disable={props.disable}/>\n                <IconButton onClick={showDetailsTask} disabled={props.disable}>\n                    <ExpandMoreIcon/>\n                </IconButton>\n                <IconButton onClick={onClickRemoveTask} disabled={props.disable}>\n                    <Delete/>\n                </IconButton>\n            </div>\n        </>\n    )\n\n    return (\n        showDetails\n            ? <>\n                <PageUpdateTask task={props.task} changeTask={onChangeTask} showDetails={showDetailsTask}/>\n                {taskJSX}\n            </>\n            : <>\n                {taskJSX}\n            </>\n    )\n})\n\nexport const TaskContainer: React.FC<TaskContainerPropsType> = props => {\n    let taskJSX;\n    const dispatch = useDispatch();\n\n    const changeTask = useCallback((todolistId: string, idTask: string, model: UpdateModelPropertyTaskType) => {\n        dispatch(updateTask(todolistId, idTask, model));\n    }, [dispatch]);\n    const removeTask = useCallback((id: string, todoListID: string) => {\n        dispatch(deleteTask(todoListID, id));\n    }, [dispatch]);\n\n    if (props.tasks !== undefined) {\n        let taskForTodoList = props.tasks;\n        if (props.filter === 'active') {\n            taskForTodoList = props.tasks.filter(t => t.status === TaskStatuses.New)\n        }\n        if (props.filter === 'completed') {\n            taskForTodoList = props.tasks.filter(t => t.status === TaskStatuses.InProgress)\n        }\n        taskJSX = taskForTodoList.map(el =>\n            <Task key={el.id}\n                  task={el}\n                  disable={props.disable}\n                  todoListId={props.todoListId}\n                  removeTask={removeTask}\n                  changeTask={changeTask}\n            />);\n    }\n\n    return (\n        <>\n            {taskJSX}\n        </>\n    )\n\n}\n\nconst GreenCheckbox = withStyles({\n    root: {\n        color: green[400],\n        '&$checked': {\n            color: green[600],\n        },\n    },\n    checked: {},\n})((props: CheckboxProps) => <Checkbox color=\"default\" {...props} />);","import React from 'react';\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\nimport {FormikProps, useFormik, withFormik} from \"formik\";\nimport * as Yup from \"yup\";\n\ninterface ValuesType {\n    title: string\n}\n\ninterface FormProps {\n    disable: boolean\n    onSubmit: (title: string) => void\n}\n\nconst Form: React.FC<FormProps & FormikProps<ValuesType>> = React.memo(props => {\n\n    const formik = useFormik({\n        initialValues: {\n            title: \"\"\n        },\n        validationSchema: Yup.object().shape({\n            title: Yup.string().trim(\"spaces are not allowed at the beginning of the task name.\").max(100, \"Too long\")\n        }),\n        onSubmit: (values, {resetForm}) => {\n            props.onSubmit(values.title);\n            resetForm({})\n        }\n    })\n\n    return (\n        <form onSubmit={formik.handleSubmit} style={({position:\"absolute\"})}>\n            <TextField {...formik.getFieldProps(\"title\")}\n                       variant={\"outlined\"} disabled={props.disable}\n                       size={'small'}\n                       label={formik.errors.title ? \"Error\" : \"Title\"}\n                        error={formik.errors.title !== undefined}\n                       helperText={formik.errors.title ? formik.errors.title : null}\n            />\n            <IconButton color={\"primary\"} disabled={props.disable} type={\"submit\"}>\n                <AddBox/>\n            </IconButton>\n        </form>\n    )\n})\n\n\nexport const AddItemFormContainer = withFormik<FormProps, ValuesType>({\n    mapPropsToValues: props => {\n        return {\n            title: \"\",\n            disable: props.disable,\n            onSubmit: props.onSubmit\n        };\n    },\n    handleSubmit: (values, form) => {\n        form.props.onSubmit(values.title);\n    },\n})(Form);\n\n\n\n","import React, {useCallback, useEffect, useState} from 'react';\nimport {BottomNavigation, IconButton, makeStyles} from '@material-ui/core';\nimport {Delete} from '@material-ui/icons';\nimport {ButtonFilter} from '../common/ButtonFilter';\nimport {TaskContainer} from '../task/Task';\nimport {getTasks} from '../../redux/reducers/TaskReducer';\nimport {useDispatch} from 'react-redux';\nimport {TodolistPropsType} from '../../redux/types/Types';\nimport {AddItemFormContainer} from \"../FormComponents/AddItemFormFormik\";\nimport {EditableSpanFormik} from \"../FormComponents/EditableSpanFormik\";\n\nexport const TodoList: React.FC<TodolistPropsType> = React.memo(props => {\n\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    const [value, setValue] = useState<number>(0);\n\n    useEffect(() => {\n        dispatch(getTasks(props.todoList.id));\n    }, [dispatch,props.todoList.id])\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(title, props.todoList.id);\n    }, [props]);\n\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todoList.id), [props]);\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todoList.id), [props]);\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todoList.id), [props]);\n\n    const onClickRemoveTodoList = () => props.removeTodoList(props.todoList.id);\n    const changeTodoListTitle = useCallback((title: string) => {\n        props.changeTodoListTitle(props.todoList.id, title);\n    }, [props]);\n\n    return (\n        <div className={classes.todolist}>\n            <h3 className={'task_title'}>\n                <EditableSpanFormik title={props.todoList.title}\n                                    changeTitle={changeTodoListTitle}\n                                    type={\"title\"}\n                                    disable={props.todoList.disable}/>\n                <IconButton onClick={onClickRemoveTodoList} disabled={props.todoList.disable}>\n                    <Delete/>\n                </IconButton>\n            </h3>\n            <AddItemFormContainer onSubmit={addTask} disable={props.todoList.disable}/>\n            <div className={classes.listTasks}>\n                <TaskContainer todoListId={props.todoList.id}\n                               tasks={props.tasks}\n                               filter={props.todoList.filter}\n                               disable={props.todoList.disable}/>\n            </div>\n            <BottomNavigation value={value}\n                              showLabels\n                              className={classes.bntNav}\n                              onChange={(event, newValue) => {setValue(newValue);}}>\n                <ButtonFilter titleP={'all'} filterP={props.todoList.filter} onClickHandlerP={onAllClickHandler}/>\n                <ButtonFilter titleP={'active'} filterP={props.todoList.filter} onClickHandlerP={onActiveClickHandler}/>\n                <ButtonFilter titleP={'completed'} filterP={props.todoList.filter} onClickHandlerP={onCompletedClickHandler}/>}\n            </BottomNavigation>\n        </div>\n    );\n})\n\nconst useStyles = makeStyles({\n    bntNav: {\n    },\n    listTasks:{\n        marginTop:\"70px\",\n        overflowY:\"scroll\",\n        height:\"300px\",\n    },\n    todolist:{\n        overflow:\"hidden\",\n        minWidth: 360,\n        maxHeight:490,\n    }\n});\n\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport {StatusAppType} from \"../../redux/reducers/StatusAppReducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../redux/store\";\nimport MuiAlert, {AlertProps} from \"@material-ui/lab/Alert\";\nimport {actionsStatusApp} from \"../../redux/actions/Actions\";\n\nconst Alert = (props: AlertProps) => <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n\nexport const Snackbars = () => {\n\n    const statusApp = useSelector<AppRootStateType, StatusAppType>(state => state.statusApp);\n    const dispatch = useDispatch();\n\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(actionsStatusApp.setStatusApp(\"idle\"));\n        dispatch(actionsStatusApp.setMessageStatus(\"\"));\n    };\n\n    return (\n        <>\n            <Snackbar open={statusApp.status === \"succeeded\"} autoHideDuration={3000} onClose={handleClose}>\n                <Alert onClose={handleClose} severity=\"success\">\n                    {statusApp.message}\n                </Alert>\n            </Snackbar>\n            <Snackbar open={statusApp.status === \"failed\"} autoHideDuration={3000} onClose={handleClose}>\n                <Alert onClose={handleClose} severity=\"error\">\n                    {statusApp.message}\n                </Alert>\n            </Snackbar>\n        </>\n    );\n};\n","import {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from '../../redux/store';\nimport {FilterValuesType, TaskStateType, TodoListContainerType, TodoListDomainType} from '../../redux/types/Types';\nimport React, {useCallback, useEffect} from 'react';\nimport {\n    addTodolistTC,\n    deleteTodoListTC,\n    getTodoListsTC,\n    updateTitleTodoListTC\n} from '../../redux/reducers/TodoListReducers';\nimport {createTaskTC} from '../../redux/reducers/TaskReducer';\nimport {Grid, Paper} from '@material-ui/core';\nimport {TodoList} from './TodoList';\nimport {Redirect} from \"react-router-dom\";\nimport {Snackbars} from \"../common/SnackBars\";\nimport {AddItemFormContainer} from \"../FormComponents/AddItemFormFormik\";\nimport {actionsTodoList} from \"../../redux/actions/Actions\";\n\nconst TodoListContainer: React.FC<TodoListContainerType> = props => {\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getTodoListsTC());\n    }, [dispatch])\n\n    const addTask = useCallback((title: string, todoListID: string) => {\n        dispatch(createTaskTC(todoListID, title));\n    }, [dispatch]);\n    const changeTaskFilter = useCallback((value: FilterValuesType, todoListID: string) => {\n        dispatch(actionsTodoList.changeTodoListFilter(todoListID, value));\n    }, [dispatch]);\n    const changeTodoListTitle = useCallback((todoListID: string, title: string) => {\n        dispatch(updateTitleTodoListTC(todoListID, title));\n    }, [dispatch]);\n    const removeTodoList = useCallback((todoListID: string) => {\n        dispatch(deleteTodoListTC(todoListID));\n    }, [dispatch]);\n\n    const todoListsJSX = props.todoLists.map(tl => {\n        let taskForTodoList = props.tasks[tl.id];\n        return (\n            <Grid item key={tl.id}>\n                <Paper elevation={10} className={'paper_style'}>\n                    <TodoList todoList={tl}\n                              tasks={taskForTodoList}\n                              changeFilter={changeTaskFilter}\n                              addTask={addTask}\n                              removeTodoList={removeTodoList}\n                              changeTodoListTitle={changeTodoListTitle}\n                    />\n                </Paper>\n            </Grid>\n        )\n    })\n\n    return (\n        <>\n            {todoListsJSX}\n        </>\n    )\n}\n\nexport const TodoPage = () => {\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.isAuth.isAuth);\n    const todoLists = useSelector<AppRootStateType, TodoListDomainType[]>(state => state.todoLists);\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks);\n    const dispatch = useDispatch();\n\n    const addTodoList = useCallback((title: string) => {\n        dispatch(addTodolistTC(title));\n    }, [dispatch]);\n\n    if (!isAuth) {\n        return <Redirect to={\"/login\"}/>\n    }\n\n    return (\n        <>\n            <Grid container style={{padding: '20px'}}>\n                <AddItemFormContainer onSubmit={addTodoList} disable={false}/>\n            </Grid>\n            <Grid container spacing={5} style={{marginTop: '25px',justifyContent:\"center\"}}>\n                <TodoListContainer todoLists={todoLists} tasks={tasks}/>\n            </Grid>\n            <Snackbars/>\n        </>\n    )\n}\n","import {ActionsType, MeProfileType} from '../types/Types';\nimport {AppThunkType} from \"../store\";\nimport {APIAuthMe} from \"../../DAL/APIAuthMe\";\nimport {stopSubmit} from \"redux-form\";\nimport {actionsIsAuth, actionsStatusApp} from \"../actions/Actions\";\n\nconst initialState: MeProfileType = {\n    id: 0,\n    login: \"\",\n    email: \"\",\n    password: \"\",\n    rememberMe: false,\n    captcha: false,\n    isAuth: false,\n}\nconst actions = {\n    ...actionsIsAuth,\n    ...actionsStatusApp,\n}\n\nexport const IsAuthReducer = (state: MeProfileType = initialState, action: ActionsType<typeof actions>): MeProfileType => {\n    switch (action.type) {\n        case \"SET-ME-DATA\":\n            return {...state, ...action.data,isAuth:action.isAuth};\n        case \"LOG-OUT\":\n            return {id:0,login:\"\",email:\"\",password:\"\",rememberMe:false,captcha:false,isAuth:false};\n        default:\n            return state\n    }\n}\n\nexport const authMe = (): AppThunkType => async dispatch => {\n    dispatch(actions.setStatusApp(\"load\"));\n    try {\n        const result = await APIAuthMe.me();\n        dispatch(actions.setMeData(result.data,true));\n        dispatch(actions.setStatusApp(\"idle\"));\n    } catch (e) {\n        dispatch(actions.setStatusApp(\"failed\"));\n        dispatch(actions.setMessageStatus(e.message));\n        throw new Error(e.message);\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe?: boolean, captcha?: boolean): AppThunkType => async dispatch => {\n    dispatch(actions.setStatusApp(\"load\"));\n    try {\n        const result = await APIAuthMe.login(email, password, rememberMe, captcha);\n        if (result.resultCode === 0)\n        {\n            dispatch(authMe());\n            dispatch(actions.setStatusApp(\"idle\"));\n        }else{\n            dispatch(stopSubmit(\"login\",{_error:result.messages[0]}));\n        }\n    } catch (e) {\n        dispatch(actions.setStatusApp(\"failed\"));\n        dispatch(actions.setMessageStatus(e.message));\n        throw new Error(e.message);\n    }\n}\n\nexport const logOut = (): AppThunkType => async dispatch => {\n    dispatch(actions.setStatusApp(\"load\"));\n    try {\n        const result = await APIAuthMe.logOut();\n        result.resultCode === 0 &&\n        dispatch(actions.logOut());\n        dispatch(actions.setStatusApp(\"idle\"));\n    } catch (e) {\n        dispatch(actions.setStatusApp(\"failed\"));\n        dispatch(actions.setMessageStatus(e.message));\n        throw new Error(e.message);\n    }\n}","import React from \"react\";\nimport {Button, Checkbox, FormControlLabel, makeStyles, Paper, TextField} from \"@material-ui/core\";\nimport {createStyles} from \"@material-ui/core/styles\";\nimport {FormikProps, useFormik, withFormik} from \"formik\";\nimport {FormDataLoginType} from \"../../redux/types/Types\";\nimport * as Yup from 'yup';\n\ninterface ValuesType {\n    email: string\n    password: string\n    rememberMe: boolean\n}\ninterface FormFormikProps {\n    onSubmit: (formData: FormDataLoginType) => void\n}\ninterface MyFormProps {\n    initialEmail?: string;\n    initialPassword?: string;\n    initialRememberMe?: boolean;\n    initialCaptcha?: boolean\n    onSubmit: (formData: FormDataLoginType) => void\n}\n\nconst Form: React.FC<FormFormikProps & FormikProps<ValuesType>> = React.memo(props => {\n    const classes = useStyles();\n    const {touched, errors} = props;\n\n    const formik = useFormik({\n        initialValues: {\n            email: \"\",\n            password: \"\",\n            rememberMe: false,\n        },\n        validationSchema: Yup.object().shape({\n            email: Yup.string().email('Invalid email').required('Required'),\n            password: Yup.string().min(8,'Must be 8 characters or more').required('Required'),\n        }),\n        onSubmit: values => {\n            props.onSubmit(values)\n        }\n    })\n\n    return (\n        <form onSubmit={formik.handleSubmit}>\n            <Paper elevation={8} className={classes.paper}>\n                <h1>Login</h1>\n                <TextField label={\"Email\"}\n                           {...formik.getFieldProps(\"email\")}/>\n                {touched.email && errors.email && <div>{errors.email}</div>}\n                <TextField label={\"Password\"}\n                           type={\"password\"}\n                           {...formik.getFieldProps(\"password\")}/>\n                {formik.errors.password ? <div>{formik.errors.password}</div> : null}\n                <FormControlLabel control={<Checkbox color={\"primary\"}\n                                                     checked={formik.values.rememberMe}\n                                                     {...formik.getFieldProps(\"rememberMe\")}/>}\n                                  label={\"Remember me\"}/>\n                <Button type=\"submit\" variant={\"outlined\"} color={\"primary\"}>\n                    Submit\n                </Button>\n            </Paper>\n        </form>\n    )\n})\n\nexport const FormLoginContainer = withFormik<MyFormProps, ValuesType>({\n    mapPropsToValues: props => {\n        return {\n            email: props.initialEmail || '',\n            password: props.initialPassword || '',\n            rememberMe: props.initialRememberMe || false,\n            onSubmit: props.onSubmit\n        };\n    },\n    handleSubmit: (values,form) => {\n        form.props.onSubmit(values);\n    },\n})(Form);\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        paper: {\n            minWidth: '300px',\n            minHeight: '350px',\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'space-around',\n        },\n    })\n)\n","import {useDispatch, useSelector} from \"react-redux\";\nimport {login} from \"../../redux/reducers/IsAuthReducer\";\nimport {Redirect} from \"react-router-dom\";\nimport {AppRootStateType} from \"../../redux/store\";\nimport {Grid, makeStyles} from \"@material-ui/core\";\nimport {createStyles} from \"@material-ui/core/styles\";\nimport React, {useCallback} from 'react'\nimport {FormDataLoginType} from \"../../redux/types/Types\";\nimport {FormLoginContainer} from \"../FormComponents/LoginFormFormik\";\n\nexport const LoginPage = React.memo(() => {\n\n        const dispatch = useDispatch();\n        const isAuth = useSelector<AppRootStateType, boolean>(state => state.isAuth.isAuth);\n        const classes = useStyles();\n\n        const signIn = useCallback((formData: FormDataLoginType) => {\n            if (formData.rememberMe === undefined) formData.rememberMe = false;\n            if (formData.captcha === undefined) formData.captcha = false;\n            dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha));\n        }, [dispatch])\n\n        if (isAuth) {\n            return <Redirect to={'/todolists'}/>\n        }\n\n        return (\n            <>\n                <Grid container spacing={5} className={classes.login}>\n                    <FormLoginContainer onSubmit={signIn}/>\n                </Grid>\n            </>\n        )\n    }\n)\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        login: {\n            display: 'flex',\n            flexDirection: \"column\",\n            alignContent: 'center',\n            marginTop: '50px',\n        },\n    })\n)\n","import {AppBar, Button, IconButton, Toolbar, Typography} from '@material-ui/core';\nimport {Menu} from '@material-ui/icons';\nimport React from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../redux/store\";\nimport {StatusType} from \"../../redux/reducers/StatusAppReducer\";\nimport {logOut} from \"../../redux/reducers/IsAuthReducer\";\n\ntype HeaderType = {\n    status: StatusType\n    isAuth: boolean\n    userLogin: string\n    logout: () => void\n}\n\nconst Header: React.FC<HeaderType> = props => {\n    return (\n        <AppBar position=\"static\">\n            <Toolbar style={{justifyContent: \"space-between\"}}>\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                    <Menu/>\n                </IconButton>\n                <Typography variant=\"h6\">\n                    TodoList\n                </Typography>\n                {\n                    props.isAuth\n                        ? <>\n                            <Button onClick={props.logout} color={\"inherit\"}>Log out</Button>\n                        </>\n                        : <Button color=\"inherit\">Login</Button>\n                }\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nexport const HeaderContainer = () => {\n    const status = useSelector<AppRootStateType, StatusType>(state => state.statusApp.status);\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.isAuth.isAuth);\n    const userLogin = useSelector<AppRootStateType, string>(state => state.isAuth.login);\n    const dispatch = useDispatch();\n\n    const logout = () => {\n        dispatch(logOut());\n    }\n\n    return <Header status={status} isAuth={isAuth} userLogin={userLogin} logout={logout}/>\n}","import {ActionsType} from \"../types/Types\";\nimport {actionsIsAuth, actionsStatusApp} from \"../actions/Actions\";\nimport {AppThunkType} from \"../store\";\nimport {APIAuthMe} from \"../../DAL/APIAuthMe\";\nimport {handleServerNetworkError} from \"../../utils/errorUtils\";\n\nexport type StatusType = \"idle\" | \"load\" | \"succeeded\" | \"failed\"\nexport type StatusAppType = {\n    message?: string\n    status: StatusType\n    isInitialized:boolean\n}\n\nconst initialState: StatusAppType = {\n    message: \"\",\n    status: \"idle\",\n    isInitialized:false,\n}\nconst actions = {\n    ...actionsStatusApp,\n    ...actionsIsAuth,\n}\n\nexport const StatusAppReducer = (state: StatusAppType = initialState, action: ActionsType<typeof actions>): StatusAppType => {\n    switch (action.type) {\n        case \"SET-APP-STATUS\":\n            return {...state, status: action.status}\n        case \"SET-MESSAGE-STATUS\":\n            return {...state, message: action.message}\n        case \"SET-APP-INITIALIZED\":\n            return {...state, isInitialized: action.isInitialized}\n        default:\n            return state\n    }\n}\n\n\nexport const initializeApp = ():AppThunkType => async dispatch => {\n    try {\n        const me = await APIAuthMe.me();\n        if (me.resultCode === 0){\n            dispatch(actions.setMeData(me.data,true));\n        }\n        dispatch(actions.setAppInitialized(true));\n    }catch (error){\n        handleServerNetworkError(error, dispatch);\n    }\n}","import React, {useEffect} from 'react';\nimport './App.css';\nimport {TodoPage} from '../components/todolist/TodoListContainer';\nimport {Route, Switch} from \"react-router-dom\";\nimport {LoginPage} from \"../components/Login/Login\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../redux/store\";\nimport {HeaderContainer} from \"../components/header/Header\";\nimport {CircularProgress, Container, LinearProgress, makeStyles} from \"@material-ui/core\";\nimport {Snackbars} from \"../components/common/SnackBars\";\nimport {createStyles} from \"@material-ui/core/styles\";\nimport {initializeApp, StatusType} from \"../redux/reducers/StatusAppReducer\";\n\nexport function App() {\n    const statusApp = useSelector<AppRootStateType, StatusType>(state => state.statusApp.status);\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.statusApp.isInitialized);\n    const dispatch = useDispatch();\n    const classes = useStyles();\n\n    useEffect(()=>{\n        dispatch(initializeApp());\n    },[dispatch])\n\n    if (!isInitialized){\n        return <div className={classes.progress}>\n            <CircularProgress />\n        </div>\n    }\n\n    return (\n        <Switch>\n            <>\n                <HeaderContainer/>\n                {statusApp === \"load\" && <LinearProgress className={classes.load}/>}\n                <Container fixed className={classes.content}>\n                    <Route path={\"/todolists\"} component={TodoPage}/>\n                    <Route path={\"/login\"} component={LoginPage}/>\n                </Container>\n                <Snackbars/>\n            </>\n        </Switch>\n    )\n}\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        load: {\n            position: \"absolute\",\n            width: '100%',\n        },\n        progress:{\n            position: \"absolute\",\n            width: \"100%\",\n            height:\"100%\",\n            display:\"flex\",\n            justifyContent:\"center\",\n            alignItems:\"center\",\n        },\n        page:{\n            width: \"100%\",\n            height: \"100%\",\n        },\n        content:{\n            maxWidth: \"90%\",\n        }\n    }),\n);\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\nimport {TaskReducer} from './reducers/TaskReducer';\nimport {TodoListReducers} from './reducers/TodoListReducers';\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk';\nimport {ActionsType} from './types/Types';\nimport {IsAuthReducer} from \"./reducers/IsAuthReducer\";\nimport {reducer as formReducer} from 'redux-form'\nimport {StatusAppReducer} from \"./reducers/StatusAppReducer\";\nimport {actionsIsAuth, actionsStatusApp, actionsTask, actionsTodoList} from \"./actions/Actions\";\n\nconst actions = {\n    ...actionsTodoList,\n    ...actionsTask,\n    ...actionsStatusApp,\n    ...actionsIsAuth,\n}\n\nconst rootReducer = combineReducers({\n    todoLists: TodoListReducers,\n    tasks: TaskReducer,\n    statusApp: StatusAppReducer,\n    isAuth:IsAuthReducer,\n    form:formReducer,\n});\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\n\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType,\n    AppRootStateType,\n    unknown,\n    ActionsType<typeof actions>>\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {App} from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>\r\n    , document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}