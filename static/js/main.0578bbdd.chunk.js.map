{"version":3,"sources":["serviceWorker.ts","redux/types/Types.ts","DAL/Api-key.ts","DAL/APITodoLists.ts","redux/actions/Actions.ts","utils/errorUtils.ts","redux/reducers/TodoListReducers.ts","DAL/APITasks.ts","redux/reducers/TaskReducer.ts","components/common/ButtonFilter.tsx","components/common/DatesTask.tsx","components/FormComponents/EditableSpanFormik.tsx","components/task/PageUpdateTask.tsx","components/task/Task.tsx","components/FormComponents/AddItemFormFormik.tsx","components/todolist/TodoList.tsx","components/common/SnackBars.tsx","components/todolist/TodoListContainer.tsx","DAL/APIAuthMe.ts","redux/reducers/IsAuthReducer.ts","components/FormComponents/LoginFormFormik.tsx","components/Login/Login.tsx","components/header/Header.tsx","redux/reducers/StatusAppReducer.ts","app/App.tsx","redux/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","apiKey","axiosInstance","axios","create","baseURL","withCredentials","headers","APITodoLists","get","then","res","data","title","post","response","id","put","delete","actionsTodoList","getTodoLists","todoLists","type","addTodoList","todoList","removeTodoList","todoListId","changeTodoListTitle","todoListID","changeTodoListFilter","filter","addTasksTodoList","isDisable","disable","actionsTask","getTask","tasks","addTask","task","removeTask","idTask","changeTask","actionsStatusApp","setStatusApp","status","setMessageStatus","message","setAppInitialized","isInitialized","actionsIsAuth","setMeData","isAuth","logOut","handleServerAppError","dispatch","messages","length","handleServerNetworkError","error","initialState","actions","APITasks","items","property","resultCode","getTasks","idTodolist","a","ButtonFilter","memo","props","titleP","filterP","onClickHandlerP","Button","variant","onClick","color","DatesTask","date","nameDate","useState","dateValue","setDateValue","classes","useStyles","className","container","noValidate","TextField","label","defaultValue","onChange","e","currentTarget","value","saveDate","textFieldTitle","InputLabelProps","shrink","makeStyles","theme","createStyles","display","flexWrap","margin","marginLeft","spacing","marginRight","width","priorities","Form","priority","setPriority","schema","Yup","shape","max","trim","formik","useFormik","initialValues","validationSchema","onSubmit","values","resetForm","changeTitle","handleSubmit","select","event","target","helperText","disabled","autoFocus","map","option","MenuItem","style","position","errors","getFieldProps","EditableSpanForm","withFormik","mapPropsToValues","form","EditableSpanFormik","editMode","setEditMode","saveTitle","useCallback","titleForSpan","useMemo","substr","Tooltip","placement","maxWidth","textFieldPriority","PageUpdateTask","useDispatch","useEffect","description","textDesc","setTextDesc","setTask","dateComp","push","savePriority","newPriority","Number","saveTask","addedDate","startDate","deadline","showDetails","Box","root","zIndex","Paper","elevation","box","header","IconButton","font","content","dates","multiline","rows","fullWidth","size","button","startIcon","height","top","left","backgroundColor","borderRadius","fontSize","fontWeight","justifyContent","Task","setShowDetails","onClickRemoveTask","showDetailsTask","onChangeTask","model","changeTaskTitle","taskJSX","GreenCheckbox","checked","InProgress","New","Delete","TaskContainer","todolistId","getState","find","tl","Error","modelAPI","order","item","updateTask","undefined","taskForTodoList","t","el","withStyles","green","Checkbox","required","AddBox","AddItemFormContainer","TodoList","React","setValue","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","onClickRemoveTodoList","todolist","listTasks","BottomNavigation","showLabels","bntNav","newValue","marginTop","overflowY","overflow","minWidth","maxHeight","Alert","Snackbars","statusApp","useSelector","state","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","TodoListContainer","createTaskTC","changeTaskFilter","updateTitleTodoListTC","todoListsJSX","Grid","TodoPage","addTodolistTC","padding","to","APIAuthMe","email","password","rememberMe","captcha","login","min","name","paper","FormControlLabel","control","FormLoginContainer","initialEmail","initialPassword","initialRememberMe","minHeight","flexDirection","alignItems","LoginPage","signIn","formData","result","stopSubmit","_error","alignContent","Header","AppBar","Toolbar","edge","aria-label","Menu","Typography","logout","HeaderContainer","userLogin","App","me","LinearProgress","load","Container","fixed","path","component","progress","CircularProgress","page","rootReducer","combineReducers","action","isLoad","key","copyState","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.0578bbdd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","type PropertiesType<T> = T extends { [key: string]: infer U } ? U : never\r\nexport type ActionsType<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesType<T>>\r\n\r\n// todolist type\r\n\r\nexport type TodoListDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    disable: boolean\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nexport type TodolistPropsType = {\r\n    todoList:TodoListDomainType\r\n    tasks: TaskType[]\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodoListTitle: (todoListID: string, title: string) => void\r\n};\r\n\r\nexport type TodoListContainerType = {\r\n    todoLists: TodoListDomainType[]\r\n    tasks: TaskStateType\r\n}\r\n\r\n\r\n///task type\r\nexport type TaskType = {\r\n    id: string\r\n    todoListId: string\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    order: number\r\n    startDate: string\r\n    addedDate: string\r\n    deadline: string\r\n};\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nexport type TaskTypeProps = {\r\n    task: TaskType\r\n    todoListId: string\r\n    disable:boolean\r\n    removeTask: (idTask: string, todoListID: string) => void\r\n    changeTask: (todolistId: string, idTask: string, task: UpdateModelPropertyTaskType) => void\r\n}\r\n\r\nexport type TaskContainerPropsType = {\r\n    tasks: TaskType[]\r\n    todoListId: string\r\n    filter: FilterValuesType\r\n    disable:boolean\r\n}\r\n\r\nexport type UpdateModelPropertyTaskType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    order?: number\r\n    startDate?: string\r\n    addedDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type APIModelPropertyTaskType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    order: number\r\n    startDate: string\r\n    addedDate: string\r\n    deadline: string\r\n}\r\n\r\n//addItemForm\r\nexport type AddItemFormType = {\r\n    addItem: (title: string) => void\r\n    disable:boolean\r\n}\r\n\r\n//editableSpan\r\nexport type EditableSpanType = {\r\n    titleSpan: string\r\n    changeTitle: (newTitle: string) => void\r\n    type: 'title' | 'priority'\r\n    disable?:boolean\r\n};\r\n\r\n//isAuth types\r\nexport type AuthMeType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}\r\n\r\nexport type MeProfileType = AuthMeType & {\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: boolean\r\n    isAuth:boolean\r\n}\r\n\r\nexport type FormDataLoginType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n    captcha?: boolean\r\n}","\r\nexport const apiKey = '23cf7b54-6cd9-4cb1-a851-3767976432ef';","import axios from \"axios\";\r\nimport {TodoListDomainType} from '../redux/types/Types';\r\nimport {ResponseTypeGeneric} from '../redux/types/TypesResponse';\r\nimport {apiKey} from \"./Api-key\";\r\n\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": apiKey\r\n    }\r\n})\r\n\r\nexport const APITodoLists = {\r\n    get() {\r\n        return axiosInstance.get<TodoListDomainType[]>(\"todo-lists\")\r\n            .then(res => res.data)\r\n    },\r\n    create(title:string) {\r\n        return axiosInstance.post<ResponseTypeGeneric<{item:TodoListDomainType}>>(\"todo-lists\", {title})\r\n            .then(response => response.data)\r\n    },\r\n    updateTitle(title: string, id: string) {\r\n        return axiosInstance.put<ResponseTypeGeneric>(`todo-lists/${id}`, {title})\r\n            .then(response => response.data)\r\n    },\r\n    delete(id: string) {\r\n        return axiosInstance.delete<ResponseTypeGeneric>(`todo-lists/${id}`)\r\n            .then(response => response.data)\r\n    },\r\n}\r\n\r\n","import {AuthMeType, FilterValuesType, TaskType, TodoListDomainType} from '../types/Types';\r\nimport {StatusType} from \"../reducers/StatusAppReducer\";\r\n\r\nexport const actionsTodoList = {\r\n    getTodoLists: (todoLists: TodoListDomainType[]) => ({type: 'GET-TODO-LISTS', todoLists} as const),\r\n    addTodoList: (todoList: TodoListDomainType) => ({type: 'ADD-TODOLIST', todoList} as const),\r\n    removeTodoList: (todoListId: string) => ({type: 'REMOVE-TODOLIST', todoListId} as const),\r\n    changeTodoListTitle: (todoListID: string, title: string) => ({\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        todoListID,\r\n        title\r\n    } as const),\r\n    changeTodoListFilter: (todoListID: string, filter: FilterValuesType) => ({\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        todoListID,\r\n        filter\r\n    } as const),\r\n    addTasksTodoList: (todoListId: string) => ({type: 'ADD-TASKS-FOR-TODOLIST', todoListId} as const),\r\n    isDisable:(disable:boolean, todoListId:string) => ({type:\"IS-DISABLE\",disable,todoListId} as const),\r\n}\r\n\r\nexport const actionsTask= {\r\n    getTask: (todoListId: string, tasks: TaskType[]) => ({type: 'GET-TASK', todoListId, tasks} as const),\r\n    addTask: (task: TaskType) => ({type: 'ADD-TASK', task,} as const),\r\n    removeTask: (idTask: string, todoListId: string) => ({type: 'REMOVE-TASK', todoListId, idTask} as const),\r\n    changeTask: (todoListId: string, idTask: string, task: TaskType) => ({\r\n        type: 'CHANGE-TASK',\r\n        todoListId,\r\n        idTask,\r\n        task\r\n    } as const),\r\n}\r\n\r\nexport const actionsStatusApp = {\r\n    setStatusApp: (status:StatusType) => ({type:\"SET-APP-STATUS\",status} as const),\r\n    setMessageStatus:(message?:string) => ({type:\"SET-MESSAGE-STATUS\",message} as const),\r\n    setAppInitialized:(isInitialized:boolean) => ({type:\"SET-APP-INITIALIZED\",isInitialized} as const),\r\n}\r\n\r\nexport const actionsIsAuth = {\r\n    setMeData: (data:AuthMeType,isAuth:boolean) => ({type: \"SET-ME-DATA\",data,isAuth} as const),\r\n    logOut:() => ({type:\"LOG-OUT\"} as const),\r\n};","import {ResponseTypeGeneric} from \"../redux/types/TypesResponse\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ActionsType} from \"../redux/types/Types\";\r\nimport {actionsStatusApp} from \"../redux/actions/Actions\";\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<ActionsType<typeof actionsStatusApp>>\r\n\r\nexport const handleServerAppError = <T>(data: ResponseTypeGeneric<T>, dispatch: ErrorUtilsDispatchType) => {\r\n\r\n    if (data.messages.length) {\r\n        dispatch(actionsStatusApp.setMessageStatus(data.messages[0]));\r\n    } else {\r\n        dispatch(actionsStatusApp.setMessageStatus(\"Some error occurred.\"));\r\n    }\r\n    dispatch(actionsStatusApp.setStatusApp(\"failed\"));\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(actionsStatusApp.setMessageStatus(error.message))\r\n    dispatch(actionsStatusApp.setStatusApp('failed'))\r\n}","import {APITodoLists} from '../../DAL/APITodoLists';\r\nimport {ActionsType, TodoListDomainType} from '../types/Types';\r\nimport {AppThunkType} from '../store';\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/errorUtils\";\r\nimport {actionsStatusApp, actionsTodoList} from \"../actions/Actions\";\r\n\r\nconst initialState: TodoListDomainType[] = [];\r\nconst actions = {\r\n    ...actionsTodoList,\r\n    ...actionsStatusApp,\r\n}\r\n\r\nexport const TodoListReducers = (state: TodoListDomainType[] = initialState, action: ActionsType<typeof actions>): TodoListDomainType[] => {\r\n    switch (action.type) {\r\n        case 'GET-TODO-LISTS':\r\n            return action.todoLists.map(tl => ({...tl, filter: \"all\", isLoad: false}));\r\n        case 'ADD-TODOLIST':\r\n            return [...state, {...action.todoList, filter: \"all\"}];\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.todoListID ? {...tl, title: action.title} : tl);\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.todoListID ? {...tl, filter: action.filter} : tl);\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.todoListId);\r\n        }\r\n        case \"IS-DISABLE\":\r\n            return state.map(tl => tl.id === action.todoListId ? {...tl, disable: action.disable} : tl);\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getTodoListsTC = (): AppThunkType => async dispatch => {\r\n    dispatch(actions.setStatusApp(\"load\"));\r\n    try {\r\n        const todoLists = await APITodoLists.get();\r\n        dispatch(actions.getTodoLists(todoLists));\r\n        dispatch(actions.setStatusApp(\"idle\"));\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch);\r\n    }\r\n}\r\n\r\nexport const addTodolistTC = (title: string): AppThunkType => async dispatch => {\r\n    dispatch(actions.setStatusApp(\"load\"));\r\n    try {\r\n        const todoList = await APITodoLists.create(title);\r\n        if (todoList.resultCode === 0) {\r\n            dispatch(actions.addTodoList(todoList.data.item))\r\n            dispatch(actions.addTasksTodoList(todoList.data.item.id))\r\n            dispatch(actions.setStatusApp(\"succeeded\"));\r\n            dispatch(actions.setMessageStatus(\"Todo list created succeeded.\"));\r\n        } else {\r\n            handleServerAppError<{ item: TodoListDomainType }>(todoList, dispatch);\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch);\r\n    }\r\n}\r\n\r\nexport const deleteTodoListTC = (id: string): AppThunkType => async dispatch => {\r\n    dispatch(actions.setStatusApp(\"load\"));\r\n    dispatch(actions.isDisable(true, id));\r\n    try {\r\n        const data = await APITodoLists.delete(id)\r\n        if (data.resultCode === 0) {\r\n            dispatch(actions.removeTodoList(id));\r\n            dispatch(actions.removeTodoList(id));\r\n            dispatch(actions.setStatusApp(\"succeeded\"));\r\n            dispatch(actions.setMessageStatus(\"Todo list remove succeeded.\"));\r\n            dispatch(actions.isDisable(false, id));\r\n        }else{\r\n            handleServerAppError(data, dispatch);\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch);\r\n        dispatch(actions.isDisable(false, id));\r\n    }\r\n}\r\n\r\nexport const updateTitleTodoListTC = (id: string, title: string): AppThunkType => async dispatch => {\r\n    dispatch(actions.setStatusApp(\"load\"));\r\n    dispatch(actions.isDisable(true, id));\r\n    try {\r\n        const data = await APITodoLists.updateTitle(title, id)\r\n        if (data.resultCode === 0) {\r\n            dispatch(actions.changeTodoListTitle(id, title));\r\n            dispatch(actions.setStatusApp(\"succeeded\"));\r\n            dispatch(actions.setMessageStatus(\"Todo list change succeeded.\"));\r\n            dispatch(actions.isDisable(false, id));\r\n        }else{\r\n            handleServerAppError(data, dispatch);\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch);\r\n        dispatch(actions.isDisable(false, id));\r\n    }\r\n}","import axios from 'axios';\r\nimport {APIModelPropertyTaskType, TaskType} from '../redux/types/Types';\r\nimport {ResponseTypeGet, ResponseTypeGeneric} from '../redux/types/TypesResponse';\r\nimport {apiKey} from \"./Api-key\";\r\n\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': apiKey\r\n    }\r\n})\r\n\r\nexport const APITasks = {\r\n    get(id: string) {\r\n        return axiosInstance.get<ResponseTypeGet<TaskType[]>>(`/${id}/tasks`)\r\n            .then(response => response.data.items)\r\n    },\r\n    create(id: string, title: string) {\r\n        return axiosInstance.post<ResponseTypeGeneric<{item:TaskType}>>(`/${id}/tasks`, {title})\r\n            .then(response => response.data)\r\n    },\r\n    updateTitle(todoListId:string,idTask:string,property:APIModelPropertyTaskType) {\r\n        return axiosInstance.put<ResponseTypeGeneric<{item:TaskType}>>(`/${todoListId}/tasks/${idTask}`,{...property})\r\n            .then(response => response.data)\r\n    },\r\n    delete(todoListId:string,idTask:string) {\r\n        return axiosInstance.delete<ResponseTypeGeneric>(`/${todoListId}/tasks/${idTask}`)\r\n            .then(response => response.data.resultCode)\r\n    }\r\n}","import {APITasks} from '../../DAL/APITasks';\r\nimport {\r\n    ActionsType,\r\n    APIModelPropertyTaskType,\r\n    TaskStateType,\r\n    TaskType,\r\n    UpdateModelPropertyTaskType\r\n} from '../types/Types';\r\nimport {AppRootStateType, AppThunkType} from '../store';\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/errorUtils\";\r\nimport {actionsStatusApp, actionsTask, actionsTodoList} from \"../actions/Actions\";\r\n\r\nconst initialState: TaskStateType = {}\r\nconst actions = {\r\n    ...actionsTask,\r\n    ...actionsStatusApp,\r\n    ...actionsTodoList,\r\n}\r\n\r\nexport const TaskReducer = (state: TaskStateType = initialState, action: ActionsType<typeof actions>): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'GET-TASK':\r\n            return {...state, [action.todoListId]: [...action.tasks]}\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todoListId]: state[action.todoListId].filter(el => el.id !== action.idTask)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'ADD-TASKS-FOR-TODOLIST':\r\n            return {...state, [action.todoListId]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const key = action.todoListId;\r\n            const copyState = {...state};\r\n            delete copyState[key];\r\n            return copyState;\r\n        case 'CHANGE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: state[action.todoListId].map(t => t.id === action.idTask ? action.task : t)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getTasks = (idTodolist: string): AppThunkType => async dispatch => {\r\n    dispatch(actions.setStatusApp(\"load\"));\r\n    try {\r\n        const tasks = await APITasks.get(idTodolist);\r\n        dispatch(actions.getTask(idTodolist, tasks));\r\n        dispatch(actions.setStatusApp(\"idle\"));\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch);\r\n    }\r\n}\r\n\r\nexport const createTaskTC = (idTodolist: string, title: string): AppThunkType => async dispatch => {\r\n    dispatch(actions.setStatusApp(\"load\"));\r\n    dispatch(actions.isDisable(true,idTodolist));\r\n    try {\r\n        const data = await APITasks.create(idTodolist, title);\r\n        if (data.resultCode === 0) {\r\n            dispatch(actions.addTask(data.data.item));\r\n            dispatch(actions.setStatusApp(\"succeeded\"));\r\n            dispatch(actions.setMessageStatus(\"Task created succeeded.\"));\r\n            dispatch(actions.isDisable(false,idTodolist));\r\n        }else{\r\n            handleServerAppError<{item:TaskType}>(data, dispatch);\r\n            dispatch(actions.isDisable(false,idTodolist));\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch);\r\n        dispatch(actions.isDisable(false,idTodolist));\r\n    }\r\n}\r\n\r\nexport const updateTask = (todoListId: string, idTask: string, model: UpdateModelPropertyTaskType): AppThunkType =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(actions.setStatusApp(\"load\"));\r\n        dispatch(actions.isDisable(true,todoListId));\r\n        const task = getState().tasks[todoListId].find(tl => tl.id === idTask);\r\n        if (!task) {\r\n            throw new Error(\"task not found in the state\");\r\n        }\r\n        const modelAPI: APIModelPropertyTaskType = {\r\n            title: task.title,\r\n            order: task.order,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            status: task.status,\r\n            addedDate: task.addedDate,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...model\r\n        }\r\n        try {\r\n            const data = await APITasks.updateTitle(todoListId, idTask, modelAPI)\r\n            if (data.resultCode === 0) {\r\n                dispatch(actions.changeTask(todoListId, idTask, data.data.item));\r\n                dispatch(actions.setStatusApp(\"succeeded\"));\r\n                dispatch(actions.setMessageStatus(\"Task change succeeded.\"));\r\n                dispatch(actions.isDisable(false,todoListId));\r\n            }else{\r\n                handleServerAppError<{item:TaskType}>(data, dispatch);\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch);\r\n            dispatch(actions.isDisable(false,todoListId));\r\n        }\r\n\r\n    }\r\n\r\nexport const deleteTask = (todoListId: string, idTask: string): AppThunkType => async dispatch => {\r\n    dispatch(actions.setStatusApp(\"load\"));\r\n    dispatch(actions.isDisable(true,todoListId))\r\n    try {\r\n        const resultCode = await APITasks.delete(todoListId, idTask)\r\n        if (resultCode === 0) {\r\n            dispatch(actions.removeTask(idTask, todoListId));\r\n            dispatch(actions.setStatusApp(\"succeeded\"));\r\n            dispatch(actions.setMessageStatus(\"Task remove succeeded.\"));\r\n            dispatch(actions.isDisable(false,todoListId))\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch);\r\n        dispatch(actions.isDisable(false,todoListId));\r\n    }\r\n}","import React, {memo} from \"react\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {FilterValuesType} from '../../redux/types/Types';\r\n\r\ntype ButtonFilterType = {\r\n    titleP:string\r\n    filterP: FilterValuesType\r\n    onClickHandlerP: () => void\r\n}\r\n\r\nexport const ButtonFilter = memo( (props:ButtonFilterType) => {\r\n    const {titleP,filterP,onClickHandlerP} = props;\r\n    return(\r\n        <div>\r\n            <Button variant={filterP === titleP ? \"contained\" : \"outlined\"}\r\n                    onClick={onClickHandlerP}\r\n                    color={\"primary\"}>{titleP}</Button>\r\n        </div>\r\n    )\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\ntype PropsType = {\r\n    nameDate:string\r\n    date: string\r\n    saveDate:(date:string) => void\r\n}\r\n\r\nexport const DatesTask = (props:PropsType) => {\r\n    const {date,nameDate} = props\r\n    const [dateValue,setDateValue] = useState<string>(date);\r\n\r\n    const changeDate = (e:ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        setDateValue(e.currentTarget.value);\r\n        props.saveDate(dateValue);\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <form className={classes.container} noValidate>\r\n            <TextField\r\n                id=\"datetime-local\"\r\n                label={nameDate}\r\n                type=\"datetime-local\"\r\n                defaultValue={dateValue}\r\n                onChange={changeDate}\r\n                className={classes.textFieldTitle}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        container: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n            margin:'10px 0 0 0'\r\n        },\r\n        textFieldTitle: {\r\n            marginLeft: theme.spacing(1),\r\n            marginRight: theme.spacing(1),\r\n            width: 210,\r\n        },\r\n    }),\r\n);","import React, {memo, useCallback, useMemo, useState} from 'react';\r\nimport {makeStyles, MenuItem, TextField, Tooltip} from \"@material-ui/core\";\r\nimport {FormikProps, useFormik, withFormik} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {createStyles, Theme} from \"@material-ui/core/styles\";\r\n\r\ninterface ValuesType {\r\n    title: string\r\n    onSubmit: (newTitle: string) => void\r\n    type: 'title' | 'priority'\r\n    disable?: boolean\r\n}\r\ninterface FormProps {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n    type: 'title' | 'priority'\r\n    disable?: boolean\r\n}\r\nconst priorities = [\r\n    {\r\n        value: '1',\r\n        label: '1',\r\n    },\r\n    {\r\n        value: '2',\r\n        label: '2',\r\n    },\r\n    {\r\n        value: '3',\r\n        label: '3',\r\n    },\r\n    {\r\n        value: '4',\r\n        label: '4',\r\n    },\r\n];\r\n\r\nconst Form: React.FC<FormProps & FormikProps<ValuesType>> = memo(props => {\r\n\r\n    const [priority, setPriority] = useState('4');\r\n\r\n    const classes = useStyles();\r\n    const schema = Yup.object().shape({\r\n        title: Yup.string().max(100, \"Too long\").trim()\r\n    })\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setPriority(event.target.value);\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            title: props.title,\r\n            type: props.type,\r\n            disable: props.disable\r\n        },\r\n        validationSchema: schema,\r\n        onSubmit: (values, {resetForm}) => {\r\n            props.changeTitle(values.title);\r\n            resetForm({});\r\n        }\r\n    })\r\n\r\n    if (props.type === \"priority\") {\r\n        return (\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <TextField\r\n                    id=\"standard-select-currency\"\r\n                    select\r\n                    label=\"Select\"\r\n                    value={priority}\r\n                    onChange={handleChange}\r\n                    helperText=\"Please select your priority\"\r\n                    disabled={formik.values.disable} autoFocus\r\n                >\r\n                    {priorities.map((option) => (\r\n                        <MenuItem key={option.value} value={option.value}>\r\n                            {option.label}\r\n                        </MenuItem>\r\n                    ))}\r\n                </TextField>\r\n\r\n                <div style={({position: \"fixed\"})}>{formik.errors.title ? <div>{formik.errors.title}</div> : null}</div>\r\n            </form>\r\n        )\r\n    } else {\r\n        return (\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <TextField {...formik.getFieldProps(\"title\")}\r\n                           className={classes.textFieldTitle}\r\n                           disabled={formik.values.disable} autoFocus/>\r\n                <div style={({position: \"fixed\"})}>{formik.errors.title ? <div>{formik.errors.title}</div> : null}</div>\r\n            </form>\r\n        )\r\n    }\r\n})\r\n\r\n\r\nconst EditableSpanForm = withFormik<FormProps, ValuesType>({\r\n    mapPropsToValues: props => {\r\n        return {\r\n            title: props.title,\r\n            disable: props.disable,\r\n            onSubmit: props.changeTitle,\r\n            type: props.type,\r\n        };\r\n    },\r\n    handleSubmit: (values, form) => {\r\n        form.props.changeTitle(values.title);\r\n    },\r\n})(Form);\r\n\r\n\r\nexport const EditableSpanFormik: React.FC<FormProps> = memo(props => {\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n    const saveTitle = useCallback((title: string) => {\r\n        props.changeTitle(title);\r\n        setEditMode(false);\r\n    }, [props])\r\n\r\n\r\n    const titleForSpan = useMemo((): string => {\r\n        if (props.title.length > 23) {\r\n            return props.title.substr(0, 23) + \"...\";\r\n        } else {\r\n            return props.title;\r\n        }\r\n    },[props.title])\r\n\r\n    return (\r\n        <>\r\n            {\r\n                editMode\r\n                    ? <EditableSpanForm type={'title'} title={props.title}\r\n                                        changeTitle={saveTitle}\r\n                                        disable={props.disable}/>\r\n                    : <Tooltip title={props.title} placement={\"top\"}>\r\n                    <span onClick={() => {\r\n                        setEditMode(true)\r\n                    }}>{titleForSpan}</span>\r\n                    </Tooltip>\r\n            }</>\r\n    )\r\n})\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        textFieldTitle: {\r\n            maxWidth: '130px',\r\n        },\r\n        textFieldPriority: {\r\n            '& .MuiTextField-root': {\r\n                margin: theme.spacing(1),\r\n                width: '25ch',\r\n            }\r\n        },\r\n    })\r\n)","import React, {ChangeEvent, memo, useCallback, useEffect, useState} from 'react';\r\nimport {Box, Button, IconButton, makeStyles, Paper, TextField} from '@material-ui/core';\r\nimport {getTasks} from '../../redux/reducers/TaskReducer';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport {DatesTask} from '../common/DatesTask';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport {useDispatch} from 'react-redux';\r\nimport {TaskPriorities, TaskType, UpdateModelPropertyTaskType} from '../../redux/types/Types';\r\nimport {EditableSpanFormik} from \"../FormComponents/EditableSpanFormik\";\r\n\r\ninterface PageUpdateTaskType {\r\n    task: TaskType\r\n    changeTask: (property: UpdateModelPropertyTaskType) => void\r\n    showDetails: () => void\r\n}\r\n\r\nexport const PageUpdateTask: React.FC<PageUpdateTaskType> = memo(props => {\r\n\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(getTasks(props.task.todoListId));\r\n    }, [dispatch, props.task.todoListId])\r\n\r\n    const [textDesc, setTextDesc] = useState<string>(props.task.description);\r\n    const [task, setTask] = useState<TaskType>({...props.task});\r\n    const date: string[] = [];\r\n    const classes = useStyles();\r\n\r\n    const onChangeText = (e: ChangeEvent<HTMLInputElement>) => setTextDesc(e.currentTarget.value);\r\n\r\n    const saveDate = useCallback((dateComp: string) => {\r\n        date.push(dateComp)\r\n    },[date])\r\n\r\n    const savePriority = useCallback((newPriority: string) => {\r\n        const priority: TaskPriorities = Number(newPriority);\r\n        setTask({...task, priority});\r\n    },[task])\r\n\r\n    const saveTask = useCallback(() => {\r\n        const property: UpdateModelPropertyTaskType = {\r\n            priority: task.priority,\r\n            description: textDesc,\r\n            addedDate: date[0],\r\n            startDate: date[1],\r\n            deadline: date[2],\r\n        }\r\n        props.changeTask(property);\r\n        props.showDetails();\r\n    },[date, props, task.priority, textDesc])\r\n\r\n    return (\r\n        <Box className={classes.root} zIndex={'tooltip'}>\r\n            <Paper elevation={20} className={classes.box}>\r\n                <form>\r\n                    <div className={classes.header}>\r\n                        <div>\r\n                            <IconButton onClick={() => props.showDetails()}>\r\n                                <ChevronLeftIcon/>\r\n                            </IconButton>\r\n                        </div>\r\n                        <div className={classes.font}>\r\n                            <span>{task.title}</span>\r\n                        </div>\r\n                        <div className={classes.font}>\r\n                            <EditableSpanFormik title={task.priority + ''} changeTitle={savePriority} type={'priority'}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.content}>\r\n                        <div className={classes.dates}>\r\n                            <DatesTask date={task.addedDate} nameDate={'Added Start'} saveDate={saveDate}/>\r\n                            <DatesTask date={task.startDate} nameDate={'Start Date'} saveDate={saveDate}/>\r\n                            <DatesTask date={task.deadline} nameDate={'Dead line'} saveDate={saveDate}/>\r\n                        </div>\r\n                        <div className={classes.description}>\r\n                            <TextField variant={'outlined'}\r\n                                       value={textDesc}\r\n                                       label={'Description'}\r\n                                       onChange={onChangeText}\r\n                                       multiline\r\n                                       rows={8}\r\n                                       fullWidth\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            className={classes.button}\r\n                            onClick={saveTask}\r\n                            startIcon={<SaveIcon/>}\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                    </div>\r\n                </form>\r\n            </Paper>\r\n        </Box>\r\n    )\r\n})\r\n\r\n//\r\n// const EditableSpanForm = withFormik<FormProps, ValuesType>({\r\n//     mapPropsToValues: props => {\r\n//         return {\r\n//             title: props.title,\r\n//             disable: props.disable,\r\n//             onSubmit: props.changeTitle,\r\n//             type: props.type,\r\n//         };\r\n//     },\r\n//     handleSubmit: (values, form) => {\r\n//         form.props.changeTitle(values.title);\r\n//     },\r\n// })(Form);\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '47vw',\r\n            height: '42vh',\r\n        },\r\n        top: '200px',\r\n        left: '400px',\r\n        position: 'absolute',\r\n        backgroundColor: '#3f51b5',\r\n        borderRadius: '15px',\r\n    },\r\n    box: {\r\n        backgroundColor: '#ffffff'\r\n    },\r\n    font: {\r\n        fontSize: '24px',\r\n        fontWeight: 'bold',\r\n        marginRight: '35px'\r\n    },\r\n    header: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        margin: '10px 20px 10px 10px'\r\n    },\r\n    content: {\r\n        display: 'flex',\r\n        justifyContent: 'space-around'\r\n    },\r\n    dates: {},\r\n    description: {\r\n        width: '350px'\r\n    },\r\n    button: {\r\n        margin: theme.spacing(2.5),\r\n    },\r\n}));\r\n\r\n\r\n","import React, {ChangeEvent, memo, useCallback, useState} from 'react';\r\nimport {Checkbox, CheckboxProps, IconButton, withStyles} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {green} from '@material-ui/core/colors';\r\nimport {PageUpdateTask} from './PageUpdateTask';\r\nimport {\r\n    TaskContainerPropsType,\r\n    TaskStatuses,\r\n    TaskTypeProps,\r\n    UpdateModelPropertyTaskType\r\n} from '../../redux/types/Types';\r\nimport {deleteTask, updateTask} from '../../redux/reducers/TaskReducer';\r\nimport {useDispatch} from 'react-redux';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport {EditableSpanFormik} from \"../FormComponents/EditableSpanFormik\";\r\n\r\nexport const Task: React.FC<TaskTypeProps> = memo(props => {\r\n    const [showDetails, setShowDetails] = useState<boolean>(false);\r\n\r\n    const onClickRemoveTask = useCallback(() => {\r\n        props.removeTask(props.task.id, props.todoListId)\r\n    }, [props]);\r\n    const showDetailsTask = useCallback(() => {\r\n        setShowDetails(!showDetails);\r\n    }, [showDetails]);\r\n\r\n    const onChangeTask = useCallback((model: UpdateModelPropertyTaskType) => {\r\n        props.changeTask(props.todoListId, props.task.id, model);\r\n    }, [props]);\r\n    const changeTaskTitle = useCallback((title: string) => {\r\n        onChangeTask({title});\r\n    }, [onChangeTask]);\r\n\r\n    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        e.currentTarget.checked\r\n            ? onChangeTask({status: TaskStatuses.InProgress})\r\n            : onChangeTask({status: TaskStatuses.New})\r\n    }\r\n\r\n    const taskJSX = (\r\n        <>\r\n            <div className={'task'} key={props.task.id}>\r\n                <GreenCheckbox checked={props.task.status === TaskStatuses.InProgress}\r\n                               onChange={changeTaskStatus} disabled={props.disable}/>\r\n                <EditableSpanFormik type={'title'}\r\n                                    title={props.task.title}\r\n                                    changeTitle={changeTaskTitle}\r\n                                    disable={props.disable}/>\r\n                <IconButton onClick={showDetailsTask} disabled={props.disable}>\r\n                    <ExpandMoreIcon/>\r\n                </IconButton>\r\n                <IconButton onClick={onClickRemoveTask} disabled={props.disable}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n    return (\r\n        showDetails\r\n            ? <>\r\n                <PageUpdateTask task={props.task} changeTask={onChangeTask} showDetails={showDetailsTask}/>\r\n                {taskJSX}\r\n            </>\r\n            : <>\r\n                {taskJSX}\r\n            </>\r\n    )\r\n})\r\n\r\nexport const TaskContainer: React.FC<TaskContainerPropsType> = memo(props => {\r\n    let taskJSX;\r\n    const dispatch = useDispatch();\r\n\r\n    const changeTask = useCallback((todolistId: string, idTask: string, model: UpdateModelPropertyTaskType) => {\r\n        dispatch(updateTask(todolistId, idTask, model));\r\n    }, [dispatch]);\r\n    const removeTask = useCallback((id: string, todoListID: string) => {\r\n        dispatch(deleteTask(todoListID, id));\r\n    }, [dispatch]);\r\n\r\n    if (props.tasks !== undefined) {\r\n        let taskForTodoList = props.tasks;\r\n        if (props.filter === 'active') {\r\n            taskForTodoList = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n        }\r\n        if (props.filter === 'completed') {\r\n            taskForTodoList = props.tasks.filter(t => t.status === TaskStatuses.InProgress)\r\n        }\r\n        taskJSX = taskForTodoList.map(el =>\r\n            <Task key={el.id}\r\n                  task={el}\r\n                  disable={props.disable}\r\n                  todoListId={props.todoListId}\r\n                  removeTask={removeTask}\r\n                  changeTask={changeTask}\r\n            />);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {taskJSX}\r\n        </>\r\n    )\r\n\r\n})\r\n\r\nconst GreenCheckbox = withStyles({\r\n    root: {\r\n        color: green[400],\r\n        '&$checked': {\r\n            color: green[600],\r\n        },\r\n    },\r\n    checked: {},\r\n})((props: CheckboxProps) => <Checkbox color=\"default\" {...props} />);","import React, {memo} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {FormikProps, useFormik, withFormik} from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\ninterface ValuesType {\r\n    title: string\r\n}\r\n\r\ninterface FormProps {\r\n    disable: boolean\r\n    onSubmit: (title: string) => void\r\n}\r\n\r\nconst Form: React.FC<FormProps & FormikProps<ValuesType>> = memo(props => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            title: \"\"\r\n        },\r\n        validationSchema: Yup.object().shape({\r\n            title: Yup.string().trim(\"spaces are not allowed at the beginning of the task name.\").max(100, \"Too long\").required(\"req\")\r\n        }),\r\n        onSubmit: (values, {resetForm}) => {\r\n            props.onSubmit(values.title);\r\n            resetForm({})\r\n        }\r\n    })\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit} style={({position: \"absolute\"})}>\r\n            <TextField {...formik.getFieldProps(\"title\")}\r\n                       variant={\"outlined\"} disabled={props.disable}\r\n                       size={'small'}\r\n                       label={formik.errors.title ? \"Error\" : \"Title\"}\r\n                       error={formik.errors.title !== undefined}\r\n                       helperText={formik.errors.title ? formik.errors.title : null}\r\n            />\r\n            <IconButton color={\"primary\"} disabled={props.disable} type={\"submit\"}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </form>\r\n    )\r\n})\r\n\r\n\r\nexport const AddItemFormContainer = withFormik<FormProps, ValuesType>({\r\n    mapPropsToValues: props => {\r\n        return {\r\n            title: \"\",\r\n            disable: props.disable,\r\n            onSubmit: props.onSubmit\r\n        };\r\n    },\r\n    handleSubmit: (values, form) => {\r\n        form.props.onSubmit(values.title);\r\n    },\r\n})(Form);\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {BottomNavigation, IconButton, makeStyles} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {ButtonFilter} from '../common/ButtonFilter';\r\nimport {TaskContainer} from '../task/Task';\r\nimport {getTasks} from '../../redux/reducers/TaskReducer';\r\nimport {useDispatch} from 'react-redux';\r\nimport {TodolistPropsType} from '../../redux/types/Types';\r\nimport {AddItemFormContainer} from \"../FormComponents/AddItemFormFormik\";\r\nimport {EditableSpanFormik} from \"../FormComponents/EditableSpanFormik\";\r\n\r\nexport const TodoList: React.FC<TodolistPropsType> = React.memo(props => {\r\n\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const [value, setValue] = useState<number>(0);\r\n\r\n    useEffect(() => {\r\n        dispatch(getTasks(props.todoList.id));\r\n    }, [dispatch,props.todoList.id])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todoList.id);\r\n    }, [props.addTask,props.todoList.id]);\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todoList.id), [props]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todoList.id), [props]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todoList.id), [props]);\r\n\r\n    const onClickRemoveTodoList = useCallback(() => props.removeTodoList(props.todoList.id),[props])\r\n\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        props.changeTodoListTitle(props.todoList.id, title);\r\n    }, [props]);\r\n\r\n    return (\r\n        <div className={classes.todolist}>\r\n            <h3 className={'task_title'}>\r\n                <EditableSpanFormik title={props.todoList.title}\r\n                                    changeTitle={changeTodoListTitle}\r\n                                    type={\"title\"}\r\n                                    disable={props.todoList.disable}/>\r\n                <IconButton onClick={onClickRemoveTodoList} disabled={props.todoList.disable}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemFormContainer onSubmit={addTask} disable={props.todoList.disable}/>\r\n            <div className={classes.listTasks}>\r\n                <TaskContainer todoListId={props.todoList.id}\r\n                               tasks={props.tasks}\r\n                               filter={props.todoList.filter}\r\n                               disable={props.todoList.disable}/>\r\n            </div>\r\n            <BottomNavigation value={value}\r\n                              showLabels\r\n                              className={classes.bntNav}\r\n                              onChange={(event, newValue) => {setValue(newValue);}}>\r\n                <ButtonFilter titleP={'all'} filterP={props.todoList.filter} onClickHandlerP={onAllClickHandler}/>\r\n                <ButtonFilter titleP={'active'} filterP={props.todoList.filter} onClickHandlerP={onActiveClickHandler}/>\r\n                <ButtonFilter titleP={'completed'} filterP={props.todoList.filter} onClickHandlerP={onCompletedClickHandler}/>}\r\n            </BottomNavigation>\r\n        </div>\r\n    );\r\n})\r\n\r\nconst useStyles = makeStyles({\r\n    bntNav: {\r\n    },\r\n    listTasks:{\r\n        marginTop:\"70px\",\r\n        overflowY:\"scroll\",\r\n        height:\"300px\",\r\n    },\r\n    todolist:{\r\n        overflow:\"hidden\",\r\n        minWidth: 360,\r\n        maxHeight:490,\r\n    }\r\n});\r\n\r\n","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport {StatusAppType} from \"../../redux/reducers/StatusAppReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\nimport MuiAlert, {AlertProps} from \"@material-ui/lab/Alert\";\r\nimport {actionsStatusApp} from \"../../redux/actions/Actions\";\r\n\r\nconst Alert = (props: AlertProps) => <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n\r\nexport const Snackbars = () => {\r\n\r\n    const statusApp = useSelector<AppRootStateType, StatusAppType>(state => state.statusApp);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(actionsStatusApp.setStatusApp(\"idle\"));\r\n        dispatch(actionsStatusApp.setMessageStatus(\"\"));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Snackbar open={statusApp.status === \"succeeded\"} autoHideDuration={3000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"success\">\r\n                    {statusApp.message}\r\n                </Alert>\r\n            </Snackbar>\r\n            <Snackbar open={statusApp.status === \"failed\"} autoHideDuration={3000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\">\r\n                    {statusApp.message}\r\n                </Alert>\r\n            </Snackbar>\r\n        </>\r\n    );\r\n};\r\n","import {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../redux/store';\r\nimport {FilterValuesType, TaskStateType, TodoListContainerType, TodoListDomainType} from '../../redux/types/Types';\r\nimport React, {memo, useCallback, useEffect} from 'react';\r\nimport {\r\n    addTodolistTC,\r\n    deleteTodoListTC,\r\n    getTodoListsTC,\r\n    updateTitleTodoListTC\r\n} from '../../redux/reducers/TodoListReducers';\r\nimport {createTaskTC} from '../../redux/reducers/TaskReducer';\r\nimport {Grid, Paper} from '@material-ui/core';\r\nimport {TodoList} from './TodoList';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Snackbars} from \"../common/SnackBars\";\r\nimport {AddItemFormContainer} from \"../FormComponents/AddItemFormFormik\";\r\nimport {actionsTodoList} from \"../../redux/actions/Actions\";\r\n\r\nconst TodoListContainer: React.FC<TodoListContainerType> = memo( props => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodoListsTC());\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todoListID: string) => {\r\n        dispatch(createTaskTC(todoListID, title));\r\n    }, [dispatch]);\r\n    const changeTaskFilter = useCallback((value: FilterValuesType, todoListID: string) => {\r\n        dispatch(actionsTodoList.changeTodoListFilter(todoListID, value));\r\n    }, [dispatch]);\r\n    const changeTodoListTitle = useCallback((todoListID: string, title: string) => {\r\n        dispatch(updateTitleTodoListTC(todoListID, title));\r\n    }, [dispatch]);\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        dispatch(deleteTodoListTC(todoListID));\r\n    }, [dispatch]);\r\n\r\n    const todoListsJSX = props.todoLists.map(tl => {\r\n        let taskForTodoList = props.tasks[tl.id];\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={10} className={'paper_style'}>\r\n                    <TodoList todoList={tl}\r\n                              tasks={taskForTodoList}\r\n                              changeFilter={changeTaskFilter}\r\n                              addTask={addTask}\r\n                              removeTodoList={removeTodoList}\r\n                              changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <>\r\n            {todoListsJSX}\r\n        </>\r\n    )\r\n})\r\n\r\nexport const TodoPage = memo(() => {\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.isAuth.isAuth);\r\n    const todoLists = useSelector<AppRootStateType, TodoListDomainType[]>(state => state.todoLists);\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks);\r\n    const dispatch = useDispatch();\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title));\r\n    }, []);\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px'}}>\r\n                <AddItemFormContainer onSubmit={addTodoList} disable={false}/>\r\n            </Grid>\r\n            <Grid container spacing={5} style={{marginTop: '25px',justifyContent:\"center\"}}>\r\n                <TodoListContainer todoLists={todoLists} tasks={tasks}/>\r\n            </Grid>\r\n            <Snackbars/>\r\n        </>\r\n    )\r\n})\r\n","import axios from 'axios'\r\nimport {apiKey} from \"./Api-key\";\r\nimport {ResponseTypeGeneric} from \"../redux/types/TypesResponse\";\r\nimport {AuthMeType} from \"../redux/types/Types\";\r\n\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': apiKey\r\n    }\r\n})\r\n\r\nexport const APIAuthMe = {\r\n    me(){\r\n        return axiosInstance.get<ResponseTypeGeneric<AuthMeType>>(\"auth/me\")\r\n            .then(response => response.data);\r\n    },\r\n    login(email:string,password:string,rememberMe?:boolean,captcha?:boolean){\r\n        return axiosInstance.post<ResponseTypeGeneric<{userId:number}>>(\"auth/login\",{email,password,rememberMe,captcha})\r\n            .then(response => response.data)\r\n    },\r\n    logOut(){\r\n        return axiosInstance.delete<ResponseTypeGeneric>(\"auth/login\")\r\n            .then(response => response.data)\r\n    }\r\n}","import {ActionsType, MeProfileType} from '../types/Types';\r\nimport {AppThunkType} from \"../store\";\r\nimport {APIAuthMe} from \"../../DAL/APIAuthMe\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {actionsIsAuth, actionsStatusApp} from \"../actions/Actions\";\r\nimport {handleServerNetworkError} from \"../../utils/errorUtils\";\r\n\r\nconst initialState: MeProfileType = {\r\n    id: 0,\r\n    login: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    rememberMe: false,\r\n    captcha: false,\r\n    isAuth: false,\r\n}\r\nconst actions = {\r\n    ...actionsIsAuth,\r\n    ...actionsStatusApp,\r\n}\r\n\r\nexport const IsAuthReducer = (state: MeProfileType = initialState, action: ActionsType<typeof actions>): MeProfileType => {\r\n    switch (action.type) {\r\n        case \"SET-ME-DATA\":\r\n            return {...state, ...action.data, isAuth: action.isAuth};\r\n        case \"LOG-OUT\":\r\n            return {id: 0, login: \"\", email: \"\", password: \"\", rememberMe: false, captcha: false, isAuth: false};\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const authMe = (): AppThunkType => async dispatch => {\r\n    dispatch(actions.setStatusApp(\"load\"));\r\n    try {\r\n        const result = await APIAuthMe.me();\r\n        dispatch(actions.setMeData(result.data, true));\r\n        dispatch(actions.setStatusApp(\"idle\"));\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch);\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe?: boolean, captcha?: boolean): AppThunkType => async dispatch => {\r\n    dispatch(actions.setStatusApp(\"load\"));\r\n    try {\r\n        const result = await APIAuthMe.login(email, password, rememberMe, captcha);\r\n        if (result.resultCode === 0) {\r\n            dispatch(authMe());\r\n            dispatch(actions.setStatusApp(\"idle\"));\r\n        } else {\r\n            dispatch(stopSubmit(\"login\", {_error: result.messages[0]}));\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch);\r\n    }\r\n}\r\n\r\nexport const logOut = (): AppThunkType => async dispatch => {\r\n    dispatch(actions.setStatusApp(\"load\"));\r\n    try {\r\n        const result = await APIAuthMe.logOut();\r\n        if (result.resultCode === 0) {\r\n            dispatch(actions.logOut());\r\n            dispatch(actions.setStatusApp(\"idle\"));\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch);\r\n    }\r\n}","import React, {FC} from \"react\";\r\nimport {Button, Checkbox, FormControlLabel, makeStyles, Paper, TextField} from \"@material-ui/core\";\r\nimport {createStyles} from \"@material-ui/core/styles\";\r\nimport {FormikProps, useFormik, withFormik} from \"formik\";\r\nimport {FormDataLoginType} from \"../../redux/types/Types\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface ValuesType {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\ninterface FormFormikProps {\r\n    onSubmit: (formData: FormDataLoginType) => void\r\n}\r\ninterface MyFormProps {\r\n    initialEmail?: string;\r\n    initialPassword?: string;\r\n    initialRememberMe?: boolean;\r\n    initialCaptcha?: boolean\r\n    onSubmit: (formData: FormDataLoginType) => void\r\n}\r\n\r\nconst Form: FC<FormFormikProps & FormikProps<ValuesType>> = React.memo(props => {\r\n    const classes = useStyles();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false,\r\n        },\r\n        validationSchema: Yup.object().shape({\r\n            email: Yup.string().email('Invalid email').required('Required'),\r\n            password: Yup.string().min(8,'Must be 8 characters or more').required('Required'),\r\n        }),\r\n        onSubmit: values => {\r\n            props.onSubmit(values)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <form name={\"login\"} onSubmit={formik.handleSubmit}>\r\n            <Paper elevation={8} className={classes.paper}>\r\n                <h1>Login</h1>\r\n                <TextField label={formik.errors.email ? \"Error\" : \"Email\"}\r\n                           {...formik.getFieldProps(\"email\")}\r\n                           error={formik.errors.email !== undefined}\r\n                           helperText={formik.errors.email ? formik.errors.email : null}\r\n                />\r\n                <TextField label={formik.errors.password ? \"Error\" : \"Password\"}\r\n                           type={\"password\"}\r\n                           {...formik.getFieldProps(\"password\")}\r\n                           error={formik.errors.password !== undefined}\r\n                           helperText={formik.errors.password ? formik.errors.password : null}\r\n                />\r\n                <FormControlLabel control={<Checkbox color={\"primary\"}\r\n                                                     checked={formik.values.rememberMe}\r\n                                                     {...formik.getFieldProps(\"rememberMe\")}/>}\r\n                                  label={\"Remember me\"}/>\r\n                <Button type=\"submit\" variant={\"outlined\"} color={\"primary\"}>\r\n                    Submit\r\n                </Button>\r\n            </Paper>\r\n        </form>\r\n    )\r\n})\r\n\r\nexport const FormLoginContainer = withFormik<MyFormProps, ValuesType>({\r\n    mapPropsToValues: props => {\r\n        return {\r\n            email: props.initialEmail || '',\r\n            password: props.initialPassword || '',\r\n            rememberMe: props.initialRememberMe || false,\r\n            onSubmit: props.onSubmit\r\n        };\r\n    },\r\n    handleSubmit: (values,form) => {\r\n        form.props.onSubmit(values);\r\n    },\r\n})(Form);\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        paper: {\r\n            minWidth: '300px',\r\n            minHeight: '350px',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            justifyContent: 'space-around',\r\n        },\r\n    })\r\n)\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../redux/reducers/IsAuthReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\nimport {Grid, makeStyles} from \"@material-ui/core\";\r\nimport {createStyles} from \"@material-ui/core/styles\";\r\nimport React, {useCallback} from 'react'\r\nimport {FormDataLoginType} from \"../../redux/types/Types\";\r\nimport {FormLoginContainer} from \"../FormComponents/LoginFormFormik\";\r\n\r\nexport const LoginPage = React.memo(() => {\r\n\r\n        const dispatch = useDispatch();\r\n        const isAuth = useSelector<AppRootStateType, boolean>(state => state.isAuth.isAuth);\r\n        const classes = useStyles();\r\n\r\n        const signIn = useCallback((formData: FormDataLoginType) => {\r\n            if (formData.rememberMe === undefined) formData.rememberMe = false;\r\n            if (formData.captcha === undefined) formData.captcha = false;\r\n            dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha));\r\n        }, [dispatch])\r\n\r\n        if (isAuth) {\r\n            return <Redirect to={'/'}/>\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Grid container spacing={5} className={classes.login}>\r\n                    <FormLoginContainer onSubmit={signIn}/>\r\n                </Grid>\r\n            </>\r\n        )\r\n    }\r\n)\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        login: {\r\n            display: 'flex',\r\n            flexDirection: \"column\",\r\n            alignContent: 'center',\r\n            marginTop: '50px',\r\n        },\r\n    })\r\n)\r\n","import {AppBar, Button, IconButton, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\nimport {StatusType} from \"../../redux/reducers/StatusAppReducer\";\r\nimport {logOut} from \"../../redux/reducers/IsAuthReducer\";\r\n\r\ntype HeaderType = {\r\n    status: StatusType\r\n    isAuth: boolean\r\n    userLogin: string\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC<HeaderType> = props => {\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                    <Menu/>\r\n                </IconButton>\r\n                <Typography variant=\"h6\">\r\n                    TodoList\r\n                </Typography>\r\n                {\r\n                    props.isAuth\r\n                        ? <>\r\n                            <Button onClick={props.logout} color={\"inherit\"}>Log out</Button>\r\n                        </>\r\n                        : <Button color=\"inherit\">Login</Button>\r\n                }\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport const HeaderContainer = () => {\r\n    const status = useSelector<AppRootStateType, StatusType>(state => state.statusApp.status);\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.isAuth.isAuth);\r\n    const userLogin = useSelector<AppRootStateType, string>(state => state.isAuth.login);\r\n    const dispatch = useDispatch();\r\n\r\n    const logout = () => {\r\n        dispatch(logOut());\r\n    }\r\n\r\n    return <Header status={status} isAuth={isAuth} userLogin={userLogin} logout={logout}/>\r\n}","import {ActionsType} from \"../types/Types\";\r\nimport {actionsIsAuth, actionsStatusApp} from \"../actions/Actions\";\r\nimport {AppThunkType} from \"../store\";\r\nimport {APIAuthMe} from \"../../DAL/APIAuthMe\";\r\nimport {handleServerNetworkError} from \"../../utils/errorUtils\";\r\n\r\nexport type StatusType = \"idle\" | \"load\" | \"succeeded\" | \"failed\"\r\nexport type StatusAppType = {\r\n    message?: string\r\n    status: StatusType\r\n    isInitialized:boolean\r\n}\r\n\r\nconst initialState: StatusAppType = {\r\n    message: \"\",\r\n    status: \"idle\",\r\n    isInitialized:false,\r\n}\r\nconst actions = {\r\n    ...actionsStatusApp,\r\n    ...actionsIsAuth,\r\n}\r\n\r\nexport const StatusAppReducer = (state: StatusAppType = initialState, action: ActionsType<typeof actions>): StatusAppType => {\r\n    switch (action.type) {\r\n        case \"SET-APP-STATUS\":\r\n            return {...state, status: action.status}\r\n        case \"SET-MESSAGE-STATUS\":\r\n            return {...state, message: action.message}\r\n        case \"SET-APP-INITIALIZED\":\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const initializeApp = ():AppThunkType => async dispatch => {\r\n    try {\r\n        const me = await APIAuthMe.me();\r\n        if (me.resultCode === 0){\r\n            dispatch(actions.setMeData(me.data,true));\r\n        }\r\n        dispatch(actions.setAppInitialized(true));\r\n    }catch (error){\r\n        handleServerNetworkError(error, dispatch);\r\n    }\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {TodoPage} from '../components/todolist/TodoListContainer';\r\nimport {Route} from \"react-router-dom\";\r\nimport {LoginPage} from \"../components/Login/Login\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../redux/store\";\r\nimport {HeaderContainer} from \"../components/header/Header\";\r\nimport {CircularProgress, Container, LinearProgress, makeStyles} from \"@material-ui/core\";\r\nimport {Snackbars} from \"../components/common/SnackBars\";\r\nimport {createStyles} from \"@material-ui/core/styles\";\r\nimport {initializeApp, StatusType} from \"../redux/reducers/StatusAppReducer\";\r\n\r\nexport function App() {\r\n    const statusApp = useSelector<AppRootStateType, StatusType>(state => state.statusApp.status);\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.statusApp.isInitialized);\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeApp());\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div className={classes.progress}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <HeaderContainer/>\r\n            {statusApp === \"load\" && <LinearProgress className={classes.load}/>}\r\n            <Container fixed className={classes.content}>\r\n                <Route path={\"/\"} component={TodoPage}/>\r\n                <Route path={\"/login\"} component={LoginPage}/>\r\n            </Container>\r\n            <Snackbars/>\r\n        </>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        load: {\r\n            position: \"absolute\",\r\n            width: '100%',\r\n        },\r\n        progress: {\r\n            position: \"absolute\",\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n        },\r\n        page: {\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n        },\r\n        content: {\r\n            maxWidth: \"90%\",\r\n        }\r\n    }),\r\n);\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {TaskReducer} from './reducers/TaskReducer';\r\nimport {TodoListReducers} from './reducers/TodoListReducers';\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk';\r\nimport {ActionsType} from './types/Types';\r\nimport {actionsIsAuth, actionsStatusApp, actionsTask, actionsTodoList} from './actions/Actions';\r\nimport {IsAuthReducer} from \"./reducers/IsAuthReducer\";\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {StatusAppReducer} from \"./reducers/StatusAppReducer\";\r\n\r\nconst actions = {\r\n    ...actionsTodoList,\r\n    ...actionsTask,\r\n    ...actionsStatusApp,\r\n    ...actionsIsAuth,\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: TodoListReducers,\r\n    tasks: TaskReducer,\r\n    statusApp: StatusAppReducer,\r\n    isAuth: IsAuthReducer,\r\n    form: formReducer,\r\n});\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType,\r\n    AppRootStateType,\r\n    unknown,\r\n    ActionsType<typeof actions>>","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {App} from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>\r\n    , document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}